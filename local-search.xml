<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>父亲：我们认识吗</title>
    <link href="/2024/01/29/Father-Do-we-know-each-other/"/>
    <url>/2024/01/29/Father-Do-we-know-each-other/</url>
    
    <content type="html"><![CDATA[<div class="blkContainerSblk collectionContainer">            <h1>父亲：我们认识吗</h1>            <div class="artInfo">                <span id="pub_date">                    作者：岑桑                </span>                <span id="media_name">                    来源：《意林》杂志                </span>            </div>            <div class="blkContainerSblkCon"> <p>　　【—】</p><p>　　在我小时候的印象里，父亲的头顶就是没有头发的，只有几根稀稀拉拉地围在旁边。母亲说，那是倔的，好好个脑袋，倔成个秃头。小时候听到这句话，我是要笑上好半天的。父亲就坐在一旁，满脸愠怒。父亲是中学语文老师，他从不体罚学生，但他会体罚我。字写不好，罚；成绩不好，罚；背不出古诗，罚。</p><p>　　那时我们住在教师小区的一楼，“高志新他爸打他了”是全院小朋友最精彩的节目。</p><p>　　一次，他让我背《行路难》，12句诗，被我背得七零八落。他生气地问：“你到底有没有用心？”我一不留神儿，回话时用了当时特别流行的词。我说：“你变态啊，老师都没让背！”</p><p>　　说完我就知道大事不妙。父亲被那两个字激得大发雷霆。按住我，用钢尺猛抽。</p><p>　　12岁的我，没自尊，没脸皮，只有杀猪一样的痛号。</p><p>　　【二】</p><p>　　中学时代，没人不看漫画，我也迷上了那些充斥着阴暗情节的作品。一次，我逃学去租书，正当我为借到最新一集的漫画得意时，没想到父亲在我身后突然出现了。</p><p>　　那些东西彻底激怒了他，他抓起我的衣领，拳头像雨点一样落了下来。</p><p>　　然而那时的我，早已在那些阴暗的漫画里，学会了不屑和冷漠。我冷冰冰地望着他，哈哈大笑。父亲被我的反常吓住了，他摇着我说：“你傻笑什么？”而我却直直地盯着他，一言不发。</p><p>　　那天回家后，母亲见我脸色不对，小心地问：“志新，没事吧？”</p><p>　　我能有什么事呢？有事的，是我的父亲。</p><p>　　【三】</p><p>　　高二那年，仍然很迷漫画的我决定报考动漫专业，学校在远离北方的广东。当时，动漫专业还不热门，我很轻松就考上了。新生报到，我没有让父母去送，还振振有词地说：“有你们送我的钱，都够坐飞机了。”没想到第二天，机票就送来了。送机那天，父亲也去了，还要了我的QQ号。</p><p>　　就在我转身离开时，身后突然传来父亲苍老的声音，他抑扬顿挫地朗诵起那首我曾经背不出的《行路难》。我听见有工作人员在劝阻，但他依旧不管不顾地大声念着：“长风破浪会有时，直挂云帆济沧海！”</p><p>　　【四】</p><p>　　大学生活很美好，假期我从没回过家。进修、打工，我可以找到太多的理由。</p><p>　　大四那年寒假，父亲带着母亲来看我。那个晚上，父亲喝得有些多，醉醺醺地拉着我说：“爸爸以前打你，你还记恨我不？”</p><p>　　我半开玩笑地说：“当然记恨了，要不我考这么远干吗？”他突然大声说：“这辈子要能重来就好了！”他一口喝光杯子里的酒，很用力地抱了抱我。</p><p>　　毕业后，我在珠海找到了工作。我发现不论自己曾经多么不屑父亲的为人处世，但骨子里还是承袭了他的不变通，于是在公司里，难免有点儿离群。不过这反倒让我更专注于工作。年底，我成了唯一领到年终奖金的新人。</p><p>　　我把奖金全部寄了回去。第二天，我给家里打电话，是母亲接的。我说：“爸呢？”忽然很想和父亲说说话，也许是为了炫耀自己的成绩吧。母亲却犹豫了一下：“你爸睡了。”“大白天的还睡啊，脾气越来越怪了。”</p><p>　　母亲无语地笑了。</p><p>　　【五】</p><p>　　2010年12月的一个晚上，很意外的，家里打来了电话。可是无论我怎么问，那边都只有呼吸声，没人说话。我正寻思出了什么事，就隐隐听见电话里传来了母亲的声音：“你做什么呢？不是让你别玩电话吗？”</p><p>　　真相是父亲患上了老年痴呆症，母亲怕我担心，没告诉我。春节，我赶回了家。</p><p>　　到家时，已是深夜。父亲睡了。母亲拉着我说：“饿不饿？吃点儿东西吧。”</p><p>　　这时，父亲醒了。他坐在床上，像是在找什么。我叫他，他不应。我问母亲：“爸这是做什么呢？”</p><p>　　母亲无奈地说：“他在找电脑呢，你走了以后，他常给你留言，后来发现你不上线，就到你空间里留。现在脑子全糊涂了，能记住的事，就剩下这个了……”</p><p>　　我忽然想起，当年因为怕麻烦，给了他一个旧的QQ号，加了他之后，基本没上过。我凭着记忆登上QQ，发现空间里积满了父亲的留言。有长篇大论的励志文，有琐碎的生活惦念。我仿佛看见渐渐衰老的父亲一个人对着电脑，自言自语的落寞。</p><p>　　后面的留言已经变得很短了。最后一条是在2010年1月16日留的，他说：“别恨爸了，回家来看看，我快要记不住你的样子了。”</p><p>　　那天，我紧紧地抱住床上的父亲，泣不成声。可他却像受不了我突来的亲热，推开我说：“你……是谁啊？我们认识吗？”</p>       </div>]]></content>
    
    
    <categories>
      
      <category>美文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsdelivr出现跳转到raw.githubusercontent.com问题处理</title>
    <link href="/2024/01/27/jsdelivr-cdn-to-gcore/"/>
    <url>/2024/01/27/jsdelivr-cdn-to-gcore/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这几天博客的图片都打不开了，</p><p>原<code>https://cdn.jsdelivr.net/</code>  图片地址打开后都会跳转到</p><p><code>https://raw.githubusercontent.com/</code>，</p><p>但是电信和广电都打不开这个地址，移动的网络却可以！！</p><h2 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h2><p>估计是因为jsdelivr对GitHub上的图片资源都进行了限制。</p><p>使用GitHub+jsdelivr搭建的图床不是长久之计，但是短期还是可以用的。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>jsdelivr未受影响的域名：</p><ul><li>gcore.jsdelivr.net</li></ul><p>jsdelivr已受影响的域名：</p><ul><li><p>cdn.jsdelivr.net</p></li><li><p>fastly.jsdelivr.net</p></li><li><p>originfastly.jsdelivr.net</p></li><li><p>quantil.jsdelivr.net</p></li></ul><p>把所有<code>cdn.jsdelivr.net</code>都替换成<code>gcore.jsdelivr.net</code></p><p><strong>1. 修改所有文章的图片链接</strong></p><p><strong>2. 修改主题配置文件_config.fluid.yml</strong></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给博客添加每日60秒读懂世界图文</title>
    <link href="/2024/01/27/add-day60s/"/>
    <url>/2024/01/27/add-day60s/</url>
    
    <content type="html"><![CDATA[<h1 id="给你的博客添加每日60秒读懂世界新闻"><a href="#给你的博客添加每日60秒读懂世界新闻" class="headerlink" title="给你的博客添加每日60秒读懂世界新闻"></a>给你的博客添加每日60秒读懂世界新闻</h1><p>记录一下啊方便后续的维护修改</p><p>步骤是：</p><ol><li><p>gitbash输入指令<code>hexo new page &quot;days60s&quot;</code></p><blockquote><p>创建一个自定义页面</p></blockquote></li><li><p>修改主题配置文件：<code>_config.fluid.yml</code></p><p>添加了一下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 在导航栏上添加按钮</span><br><span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;   每日60秒&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/day60s/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># day60s页面的相关配置</span><br><span class="hljs-comment"># 每日60秒</span><br><span class="hljs-attr">day60s:</span><br> <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br> <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/wechatid/image/blog/bg.jpg</span><br> <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br> <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br></code></pre></td></tr></table></figure></li><li><p>配置day60s页面内容：</p><ol><li><p>打开文件<code>\source\day60s\index.md</code></p></li><li><p>写入以下信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 每日60秒读懂世界<br>layout: day60s<br><span class="hljs-section">date: 2024-01-27 17:35:13</span><br><span class="hljs-section">---</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://api.03c3.cn/api/zb&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: block; margin: 0 auto; max-width: 80%; height: auto;&quot;</span>&gt;</span></span><br><br>数据来源于：每日60s读懂世界<br><br>接口来源于：[<span class="hljs-string">云综合- 聚合API服务平台 (03c3.cn)</span>](<span class="hljs-link">https://api.03c3.cn/</span>)<br></code></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫获取空气质量数据</title>
    <link href="/2024/01/26/Python-crawler-air-AQI/"/>
    <url>/2024/01/26/Python-crawler-air-AQI/</url>
    
    <content type="html"><![CDATA[<h1 id="get-text-和strip"><a href="#get-text-和strip" class="headerlink" title="get_text()和strip()"></a>get_text()<code>和</code>strip()</h1><h2 id="get-text-和-strip-是-BeautifulSoup-库中用于处理-HTML-元素的方法"><a href="#get-text-和-strip-是-BeautifulSoup-库中用于处理-HTML-元素的方法" class="headerlink" title="get_text() 和 strip() 是 BeautifulSoup 库中用于处理 HTML 元素的方法"></a><code>get_text()</code> 和 <code>strip()</code> 是 BeautifulSoup 库中用于处理 HTML 元素的方法</h2><h3 id="get-text"><a href="#get-text" class="headerlink" title="get_text()"></a>get_text()</h3><p><code>get_text()</code> 方法是 BeautifulSoup 对象中的一个方法，用于<strong>提取 HTML 元素中的文本内容</strong>。它会将指定元素及其子元素的文本内容提取出来并返回。</p><h3 id="strip"><a href="#strip" class="headerlink" title="strip()"></a>strip()</h3><p><code>strip()</code> 方法是 Python 字符串对象的一个方法，用于<strong>去除</strong>字符串两端的<strong>空白字符</strong>（如空格、制表符等）。它返回一个新的字符串，该字符串是去除了两端空白字符的原字符串副本。</p><h1 id="Python获取一整年的空气质量数据"><a href="#Python获取一整年的空气质量数据" class="headerlink" title="Python获取一整年的空气质量数据"></a>Python获取一整年的空气质量数据</h1><h2 id="可以进行数据分析处理（预测，估计）"><a href="#可以进行数据分析处理（预测，估计）" class="headerlink" title="可以进行数据分析处理（预测，估计）"></a>可以进行数据分析处理（预测，估计）</h2><h2 id="需要导入的库"><a href="#需要导入的库" class="headerlink" title="需要导入的库"></a>需要导入的库</h2><ul><li>requests</li><li>os</li><li>csv</li><li>bs4</li></ul><h2 id="请求标头"><a href="#请求标头" class="headerlink" title="请求标头"></a>请求标头</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 &#x27;</span><br>                  <span class="hljs-string">&#x27;Safari/537.36 &#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="get获取页面数据"><a href="#get获取页面数据" class="headerlink" title="get获取页面数据"></a>get获取页面数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_tr</span>(<span class="hljs-params">mon : <span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-comment"># time.sleep(3)</span><br>    <span class="hljs-comment"># 把1转换为01</span><br>    url = <span class="hljs-string">&#x27;http://www.tianqihoubao.com/aqi/guangzhou-2023&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;%02d&quot;</span> % mon) + <span class="hljs-string">&#x27;.html&#x27;</span><br>    response = requests.get(url=url, headers=headers)<br>    soup = BeautifulSoup(response.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    tr = soup.find_all(<span class="hljs-string">&#x27;tr&#x27;</span>)<br>    <span class="hljs-keyword">if</span> tr <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据获取失败&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据获取成功&quot;</span>)<br>    <span class="hljs-keyword">return</span> tr<br></code></pre></td></tr></table></figure><h2 id="写入成csv数据文件"><a href="#写入成csv数据文件" class="headerlink" title="写入成csv数据文件"></a>写入成csv数据文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">file_path = <span class="hljs-string">&#x27;air_guangzhou_2023.csv&#x27;</span><br><span class="hljs-keyword">if</span> os.path.exists(file_path):<br>    <span class="hljs-comment"># 文件存在则删除，避免重复数据</span><br>    os.remove(file_path)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    tr1 = get_tr(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> tr1[:<span class="hljs-number">1</span>]:<br>        td1 = k.find_all(<span class="hljs-string">&#x27;td&#x27;</span>)<br>        Date = td1[<span class="hljs-number">0</span>].get_text().strip()<br>        Quality_grade = td1[<span class="hljs-number">1</span>].get_text().strip()<br>        AQI = td1[<span class="hljs-number">2</span>].get_text().strip()<br>        AQI_rank = td1[<span class="hljs-number">3</span>].get_text().strip()<br>        PM25 = td1[<span class="hljs-number">4</span>].get_text().strip()<br>        PM10 = td1[<span class="hljs-number">5</span>].get_text().strip()<br>        So2 = td1[<span class="hljs-number">6</span>].get_text().strip()<br>        No2 = td1[<span class="hljs-number">7</span>].get_text().strip()<br>        CO = td1[<span class="hljs-number">8</span>].get_text().strip()<br>        O3 = td1[<span class="hljs-number">9</span>].get_text().strip()<br>    writer = csv.writer(file)<br>    writer.writerow([Date,Quality_grade,AQI,AQI_rank,PM25,PM10,So2,No2,CO,O3])  <span class="hljs-comment"># 写入表头</span><br>    file.close()<br><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">13</span>):<br>    tr2 = get_tr(<span class="hljs-built_in">int</span>(m))<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> tr2[<span class="hljs-number">1</span>:]:<br>        td2 = j.find_all(<span class="hljs-string">&#x27;td&#x27;</span>)<br>        Date_num = td2[<span class="hljs-number">0</span>].get_text().strip()<br>        Quality_grade_num = td2[<span class="hljs-number">1</span>].get_text().strip()<br>        AQI_num = td2[<span class="hljs-number">2</span>].get_text().strip()<br>        AQI_rank_num = td2[<span class="hljs-number">3</span>].get_text().strip()<br>        PM25_num = td2[<span class="hljs-number">4</span>].get_text().strip()<br>        PM10_num = td2[<span class="hljs-number">5</span>].get_text().strip()<br>        So2_num = td2[<span class="hljs-number">6</span>].get_text().strip()<br>        No2_num = td2[<span class="hljs-number">7</span>].get_text().strip()<br>        CO_num = td2[<span class="hljs-number">8</span>].get_text().strip()<br>        O3_num = td2[<span class="hljs-number">9</span>].get_text().strip()<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;air_guangzhou_2023.csv&#x27;</span>, <span class="hljs-string">&#x27;a+&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(Date_num + <span class="hljs-string">&#x27;,&#x27;</span> + Quality_grade_num + <span class="hljs-string">&#x27;,&#x27;</span> + AQI_num + <span class="hljs-string">&#x27;,&#x27;</span> + AQI_rank_num + <span class="hljs-string">&#x27;,&#x27;</span> + PM25_num + <span class="hljs-string">&#x27;,&#x27;</span> + PM10_num + <span class="hljs-string">&#x27;,&#x27;</span> + So2_num + <span class="hljs-string">&#x27;,&#x27;</span> + No2_num + <span class="hljs-string">&#x27;,&#x27;</span> + CO_num + <span class="hljs-string">&#x27;,&#x27;</span> + O3_num + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;成功抓取<span class="hljs-subst">&#123;m&#125;</span>月份的数据&#x27;</span>)<br></code></pre></td></tr></table></figure><p>以上程序就会保存类型为csv的广州2023年的空气质量指数的数据。</p><p>部分数据预览</p><table><thead><tr><th>日期</th><th>质量等级</th><th>AQI指数</th><th>当天AQI排名</th><th>PM2.5</th><th>PM10</th><th>So2</th><th>No2</th><th>Co</th><th>O3</th></tr></thead><tbody><tr><td>2023&#x2F;1&#x2F;1</td><td>优</td><td>39</td><td>71</td><td>26</td><td>38</td><td>5</td><td>22</td><td>0.73</td><td>56</td></tr><tr><td>2023&#x2F;1&#x2F;2</td><td>优</td><td>41</td><td>78</td><td>27</td><td>41</td><td>6</td><td>20</td><td>0.79</td><td>52</td></tr><tr><td>2023&#x2F;1&#x2F;3</td><td>优</td><td>47</td><td>90</td><td>32</td><td>44</td><td>5</td><td>20</td><td>0.8</td><td>54</td></tr><tr><td>2023&#x2F;1&#x2F;4</td><td>优</td><td>50</td><td>82</td><td>35</td><td>49</td><td>6</td><td>29</td><td>0.8</td><td>40</td></tr><tr><td>2023&#x2F;1&#x2F;5</td><td>优</td><td>50</td><td>71</td><td>33</td><td>52</td><td>6</td><td>41</td><td>0.88</td><td>38</td></tr><tr><td>2023&#x2F;1&#x2F;6</td><td>优</td><td>46</td><td>59</td><td>29</td><td>47</td><td>6</td><td>33</td><td>0.79</td><td>52</td></tr></tbody></table><p>一个很好用的<a href="https://tableconvert.com/zh-cn/">在线表格转换工具 - 让表格转换变得更容易 (tableconvert.com)</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://ttyun.lanzouq.com/iuXYt1mcfxfe">源码下载</a></p><p>2023广州aqi：<a href="https://ttyun.lanzouq.com/i5Sca1mcgozg">air_guangzhou_2023CSV.zip - 蓝奏云 (lanzouq.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo d推送时报错记录</title>
    <link href="/2024/01/18/hexo-d_error_port22/"/>
    <url>/2024/01/18/hexo-d_error_port22/</url>
    
    <content type="html"><![CDATA[<h1 id="写完音乐爬虫记录推送报错"><a href="#写完音乐爬虫记录推送报错" class="headerlink" title="写完音乐爬虫记录推送报错"></a>写完音乐爬虫记录推送报错</h1><h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">On branch master<br>nothing to commit, working tree clean<br>ssh: connect to host github.com port 22: Connection timed out<br>fatal: Could not <span class="hljs-built_in">read</span> from remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="hljs-string">Error: Spawn failed</span><br><span class="hljs-string">    at ChildProcess.&lt;anonymous&gt; (E:\GitPack\blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="hljs-string">    at ChildProcess.emit (node:events:518:28)</span><br><span class="hljs-string">    at cp.emit (E:\GitPack\blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="hljs-string">    at ChildProcess._handle.onexit (node:internal/child_process:294:12)</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><p>推送不了先试试能不能连接上GitHub，使用<code>ssh -T git@github.com</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">zhang@MrZhang-computer MINGW64 /e/GitPack/blog<br>$ ssh -T git@github.com<br>ssh: connect to host github.com port 22: Connection timed out<br><br></code></pre></td></tr></table></figure><p>果然是与GitHub的连接出现问题</p><p>查看用户id和邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">zhang@MrZhang-computer MINGW64 /e/GitPack/blog<br>$ git config user.name<br>wecharid<br><br></code></pre></td></tr></table></figure><ul><li>这里用户id错了。</li><li>邮箱没错。</li><li>修改过后还是连不上，说明与用户信息没关系</li></ul><p>既然不行，那就重新生成一个ssh key连接试试</p><ol><li>我把GitHub上已有的sshkey删了，再在git bash用命令<code>$ ssh-keygen -t rsa -C &quot;2759895370@qq.com&quot;</code>重新生成，配置好后，还是连接不上，说明错误不在这里</li></ol><p>通过网上查询资料得知，是因为端口22断开被掐了，更换一下端口即可</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先找到git的安装目录，找到&#x2F;etc&#x2F;ssh&#x2F;ssh_config文件,使用记事本打开它。</p><p>复制下面内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com<br>User git<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port 443<br></code></pre></td></tr></table></figure><p>粘贴到末行即可。</p><p>连接成功图</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/202401181457688.png" alt="image-20240118145654079"></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫系列-音乐下载</title>
    <link href="/2024/01/17/python_crawler_music/"/>
    <url>/2024/01/17/python_crawler_music/</url>
    
    <content type="html"><![CDATA[<h1 id="python爬虫网站下载音乐"><a href="#python爬虫网站下载音乐" class="headerlink" title="python爬虫网站下载音乐"></a>python爬虫网站下载音乐</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>免责声明：本教程仅供学习和教育使用，不用于任何商业或非法目的。请在使用本教程前确保遵守所有适用的法律法规。对于您使用本教程所产生的任何后果，包括但不限于法律纠纷、知识产权侵权等，本教程不承担任何责任。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><strong>需要了解及准备的以下信息：</strong></p><ul><li>python3.8及以上</li><li>requests库</li><li>bs4库</li><li>re库</li><li>json库</li><li>音乐网站：<a href="http://www.2t58.com/">http://www.2t58.com/</a></li></ul><h2 id="第一步、设置请求标头信息"><a href="#第一步、设置请求标头信息" class="headerlink" title="第一步、设置请求标头信息"></a>第一步、设置请求标头信息</h2><ol><li><p>打开音乐网站</p></li><li><p>按F12进入开发者选项</p></li><li><p>点击<code>Network</code>或者<code>网络</code>，勾选<code>全部</code>然后刷新获取请求</p></li><li><p>随便点击一条请求，点击<code>标头</code>或者<code>headers</code></p></li><li><p>复制相关信息，在python中创建一个字典保存请求标头信息，例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">headers = &#123;<br>    <span class="hljs-string">&#x27;Host&#x27;</span>:<span class="hljs-string">&#x27;www.2t58.com&#x27;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>:<span class="hljs-string">&#x27;http://www.2t58.com/&#x27;</span>,<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36 Edg/120.0.0.0&#x27;</span><br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="第二步、搜索音乐"><a href="#第二步、搜索音乐" class="headerlink" title="第二步、搜索音乐"></a>第二步、搜索音乐</h2><ol><li><p>创建一个url变量存储音乐网站链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">&quot;http://www.2t58.com/so/&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>创建一个搜索的方法<code>def search(url,headers): </code></p><blockquote><p>这个方法实现的功能主要有歌曲下载、歌曲搜索，翻页，以及搜索结果展示。</p><p>其中歌曲下载，结果展示可以另外调用其他方法执行。而翻页又可以用搜索结果展示</p><p>用data，page_lish接收（调用）搜索结果返回的歌曲信息（歌名：链接），页码信息</p><p>用downloda_resu接收下载结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">url, headers</span>):<br>    so = <span class="hljs-string">&#x27;so/&#x27;</span><br>    name = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入歌名/歌手(输入1122退出)：&quot;</span>))<br>    <span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;1122&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    s_url = url + so + name + <span class="hljs-string">&#x27;.html&#x27;</span><br>    response = requests.get(s_url, headers)<br>    soup = BeautifulSoup(response.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><br>    data, page_list = search_list(soup, <span class="hljs-literal">None</span>, headers)<br><br>    <span class="hljs-comment"># 页码</span><br>    end_page_url = [item.get(<span class="hljs-string">&#x27;End&#x27;</span>) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> page_list <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;End&#x27;</span> <span class="hljs-keyword">in</span> item][<span class="hljs-number">0</span>]  <span class="hljs-comment"># 尾页的链接</span><br>    <span class="hljs-comment"># 这里有一个小坑，search_name是从网页元素中text字符串截取出来的</span><br>    <span class="hljs-comment"># 网页中这段文字有空格，所以要用用户输入的name截取页码</span><br>    end_page_index_start = end_page_url.find(name + <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-built_in">len</span>(name + <span class="hljs-string">&#x27;/&#x27;</span>)<br>    end_page_index_end = end_page_url.find(<span class="hljs-string">&#x27;.html&#x27;</span>)<br>    end_page_num = end_page_url[end_page_index_start:end_page_index_end]<br>    current_page = [item.get(<span class="hljs-string">&#x27;Cur_Pg&#x27;</span>) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> page_list <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Cur_Pg&#x27;</span> <span class="hljs-keyword">in</span> item][<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第<span class="hljs-subst">&#123;current_page&#125;</span>/<span class="hljs-subst">&#123;end_page_num&#125;</span>页\t&quot;</span>)<br><br>    <span class="hljs-comment"># 指令</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 翻页</span><br>        <span class="hljs-comment">## 页码url获取</span><br>        pgup = <span class="hljs-literal">None</span><br>        pgdw = <span class="hljs-literal">None</span><br>        home = <span class="hljs-literal">None</span><br>        end = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">for</span> page_item <span class="hljs-keyword">in</span> page_list:<br>            <span class="hljs-comment">## 赋值翻页url</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;PgDw&#x27;</span> <span class="hljs-keyword">in</span> page_item:<br>                pgdw = page_item[<span class="hljs-string">&#x27;PgDw&#x27;</span>]<br>            <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;PgUp&#x27;</span> <span class="hljs-keyword">in</span> page_item:<br>                pgup = page_item[<span class="hljs-string">&#x27;PgUp&#x27;</span>]<br>            <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;Home&#x27;</span> <span class="hljs-keyword">in</span> page_item:<br>                home = page_item[<span class="hljs-string">&#x27;Home&#x27;</span>]<br>            <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;End&#x27;</span> <span class="hljs-keyword">in</span> page_item:<br>                end = page_item[<span class="hljs-string">&#x27;End&#x27;</span>]<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入歌曲前面的序号下载，输入h跳转到第一页，输入e跳转到最后一页，输入u上一页，输入d下一页&quot;</span>)<br>        instructions = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入:&quot;</span>)<br>        <span class="hljs-keyword">if</span> instructions == <span class="hljs-string">&quot;d&quot;</span> <span class="hljs-keyword">or</span> instructions == <span class="hljs-string">&quot;D&quot;</span>:<br>            <span class="hljs-keyword">if</span> pgdw <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                pgdw_url = url + pgdw<br>                data, page_list = search_list(soup,pgdw_url,headers)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前是最后一页。&quot;</span>)<br>        <span class="hljs-keyword">elif</span> instructions == <span class="hljs-string">&#x27;u&#x27;</span> <span class="hljs-keyword">or</span> instructions == <span class="hljs-string">&#x27;U&#x27;</span>:<br>            <span class="hljs-keyword">if</span> pgup <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                pgup_url = url + pgup<br>                data, page_list = search_list(soup, pgup_url, headers)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前是第一页&quot;</span>)<br>        <span class="hljs-keyword">elif</span> instructions == <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">or</span> instructions == <span class="hljs-string">&#x27;H&#x27;</span>:<br>            <span class="hljs-keyword">if</span> home <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                home_url = url + home<br>                data, page_list = search_list(soup, home_url, headers)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前是第一页&quot;</span>)<br>        <span class="hljs-keyword">elif</span> instructions == <span class="hljs-string">&#x27;e&#x27;</span> <span class="hljs-keyword">or</span> instructions == <span class="hljs-string">&#x27;E&#x27;</span>:<br>            <span class="hljs-keyword">if</span> end <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                end_url = url + end<br>                data, page_list = search_list(soup, end_url, headers)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前是最后一页&quot;</span>)<br>        <span class="hljs-comment"># 下载歌曲</span><br>        <span class="hljs-keyword">elif</span> instructions.isdigit():<br>            instructions = <span class="hljs-built_in">int</span>(instructions)<br>            <span class="hljs-keyword">if</span> instructions &gt; <span class="hljs-built_in">len</span>(data) <span class="hljs-keyword">or</span> instructions &lt; <span class="hljs-number">1</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入歌曲前面的序号&quot;</span>)<br>                <span class="hljs-keyword">continue</span><br>            song_url =url + data[instructions - <span class="hljs-number">1</span>][<span class="hljs-string">&#x27;url&#x27;</span>]<br>            downloda_resu = song_download(song_url,<span class="hljs-string">&#x27;music&#x27;</span>)<br>            <span class="hljs-keyword">if</span> downloda_resu:<br>                continu_inst = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;是否继续下载y/n(任意键退出程序):&quot;</span>)<br>                <span class="hljs-keyword">if</span> continu_inst == <span class="hljs-string">&quot;y&quot;</span> <span class="hljs-keyword">or</span> continu_inst == <span class="hljs-string">&quot;Y&quot;</span>:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">elif</span> continu_inst == <span class="hljs-string">&quot;n&quot;</span> <span class="hljs-keyword">or</span> continu_inst == <span class="hljs-string">&quot;N&quot;</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="第三步、歌曲列表展示及歌曲链接"><a href="#第三步、歌曲列表展示及歌曲链接" class="headerlink" title="第三步、歌曲列表展示及歌曲链接"></a>第三步、歌曲列表展示及歌曲链接</h2><ol><li><p>创建一个<code>def search_list(soup, url, headers):</code>方法</p></li><li><p>suop是初始搜索歌曲时获取到的html数据，url是翻页链接，当url为空时，是初始搜索时展示的第一页歌曲信息，url不为空，说明得到了翻页指令，要重新解析翻页链接得到html元素在展示新页面的歌曲信息。</p></li><li><p>其中data数据格式是：</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;陈奕迅 - 爱情转移-《爱情呼叫转移》电影主题曲|《富士山下》国语版&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;/song/bWRza2ht.html&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;陈奕迅 - 富士山下-《爱情转移》粤语版&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;/song/ZHdubmRr.html&#x27;</span>&#125;]<br></code></pre></td></tr></table></figure></blockquote><p>page_lish数据格式是:</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[&#123;<span class="hljs-string">&#x27;Cur_Pg&#x27;</span>: <span class="hljs-string">&#x27;2&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;Home&#x27;</span>: <span class="hljs-string">&#x27;/so/富士山下/1.html&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;PgUp&#x27;</span>: <span class="hljs-string">&#x27;/so/富士山下/1.html&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;PgDw&#x27;</span>: <span class="hljs-string">&#x27;/so/富士山下/3.html&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;End&#x27;</span>: <span class="hljs-string">&#x27;/so/富士山下/7.html&#x27;</span>&#125;]<br></code></pre></td></tr></table></figure></blockquote></li></ol><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">search_list</span>(<span class="hljs-params">soup, url, headers</span>):<br>    <span class="hljs-comment"># 用来展示音乐列表和返回当前是第几页</span><br><br>    <span class="hljs-keyword">if</span> url <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 判断是否页面变动</span><br>        response = requests.get(url, headers)<br>        soup = BeautifulSoup(response.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><br>    <span class="hljs-comment"># 搜索的歌曲名字</span><br>    search_name = soup.select_one(<span class="hljs-string">&#x27;.title h1&#x27;</span>).text.replace(<span class="hljs-string">&#x27;结果列表&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-comment"># 搜索结果 共有*条结果</span><br>    result_count = soup.select_one(<span class="hljs-string">&#x27;.pagedata span&#x27;</span>).text<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-number">0</span>&#125;</span>\t<span class="hljs-subst">&#123;search_name&#125;</span>\t共有<span class="hljs-subst">&#123;result_count&#125;</span>条结果\t&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">30</span>)<br><br>    <span class="hljs-comment"># 用来保存歌曲信息的列表</span><br>    data = []<br>    result_list = soup.select(<span class="hljs-string">&#x27;.name a&#x27;</span>)<br><br>    <span class="hljs-keyword">for</span> song_info <span class="hljs-keyword">in</span> result_list:<br>        <span class="hljs-comment"># 用列表保存键值对的形式</span><br>        song_name = song_info.text<br>        song_url = song_info[<span class="hljs-string">&#x27;href&#x27;</span>]<br>        data.append(&#123;<span class="hljs-string">&#x27;name&#x27;</span>: song_name, <span class="hljs-string">&#x27;url&#x27;</span>: song_url&#125;)<br><br>    <span class="hljs-comment"># 页</span><br>    pages_list = []<br>    pages = soup.select(<span class="hljs-string">&#x27;.page a&#x27;</span>)<br>    current_page = soup.find(<span class="hljs-string">&#x27;a&#x27;</span>, class_=<span class="hljs-string">&#x27;current&#x27;</span>)<br>    pages_list.append(&#123;<span class="hljs-string">&#x27;Cur_Pg&#x27;</span>: current_page.text&#125;)<br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> pages:<br>        <span class="hljs-keyword">if</span> page.text == <span class="hljs-string">&#x27;下一页&#x27;</span>:<br>            pages_list.append(&#123;<span class="hljs-string">&#x27;PgDw&#x27;</span>: page[<span class="hljs-string">&#x27;href&#x27;</span>]&#125;)<br>        <span class="hljs-keyword">elif</span> page.text == <span class="hljs-string">&#x27;上一页&#x27;</span>:<br>            pages_list.append(&#123;<span class="hljs-string">&#x27;PgUp&#x27;</span>: page[<span class="hljs-string">&#x27;href&#x27;</span>]&#125;)<br>        <span class="hljs-keyword">elif</span> page.text == <span class="hljs-string">&#x27;首页&#x27;</span>:<br>            pages_list.append(&#123;<span class="hljs-string">&#x27;Home&#x27;</span>: page[<span class="hljs-string">&#x27;href&#x27;</span>]&#125;)<br>        <span class="hljs-keyword">elif</span> page.text == <span class="hljs-string">&#x27;尾页&#x27;</span>:<br>            pages_list.append(&#123;<span class="hljs-string">&#x27;End&#x27;</span>: page[<span class="hljs-string">&#x27;href&#x27;</span>]&#125;)<br><br><br>    counter = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> song_data <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-comment"># 打印结果</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;counter&#125;</span>\t<span class="hljs-subst">&#123;song_data[<span class="hljs-string">&quot;name&quot;</span>]&#125;</span>\t&#x27;</span>)<br>        counter += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span> * <span class="hljs-number">30</span>)<br>    <span class="hljs-keyword">return</span> data, pages_list<br></code></pre></td></tr></table></figure><h2 id="第四步、歌曲下载"><a href="#第四步、歌曲下载" class="headerlink" title="第四步、歌曲下载"></a>第四步、歌曲下载</h2><p>当做到这一步时，兴致勃勃的以为就要大工告成了。</p><ol><li><p>开心的打开歌曲播放页面，按下万能的<code>F12</code>，怎么着？找到音乐资源藏在了一个<code>audio</code>的标签里面</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/yy1.png" alt="image-20240118131316168"></p></li><li><p>打开python，resquests.get一下这个页面，用bs4处理去找<code>audio</code>这个标签下的src值，怎么着？它给我报错了，说找不到audio这个标签。</p></li><li><p>把soup打印出来看一下，确实是没有audio这个标签，与网页源代码对比，少了一个播放器player。</p></li><li><p>猜想：音乐资源和播放器是通过js脚本动态加载的，get获取只能获取静态资源，所以没有audio这个标签。</p></li><li><p>验证：刷新网页，打开<strong>事件侦听器</strong>，播放音乐…没反应。查看html元素是否存在<code>audio</code>,刚打开，就侦听到了两个js脚本。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/yy2.png" alt="image-20240118131742556"></p></li><li><p>看到<code>jPlayer_waiting</code>十分可疑，在第十行，进去打个断点，刷新，经过检验，audio及播放器就是在这里生成的，采用的是Ajax（异步加载技术）不过这没关系。因为我看见它上面写明了通过post提交方式获取到歌曲信息</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/yy3.png" alt="image-20240118132543696"></p></li><li><p>post请求，且数据只有id和type，应该是歌曲id和类型了，试一下这两个</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/yy4.png" alt="image-20240118132932115"></p></li></ol><p>​去提交一下果然成功获取到了歌曲文件直链。</p><p>接下来就是完善一下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">song_download</span>(<span class="hljs-params">song_url,<span class="hljs-built_in">type</span></span>):<br>    <span class="hljs-comment"># 下载歌曲的方法</span><br>    <span class="hljs-comment"># 正则表达式获取歌曲id</span><br>    pattern = <span class="hljs-string">r&#x27;/song/(.*?)\.html&#x27;</span><br>    song_id = re.search(pattern, song_url)<br>    <span class="hljs-keyword">if</span> song_id:<br>        song_id = song_id.group(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;下载失败，原因：id未获取&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># 获取歌曲下载链接</span><br>    api = <span class="hljs-string">&#x27;http://www.2t58.com/js/play.php&#x27;</span><br>    headers2 = &#123;<br>        <span class="hljs-string">&quot;Referer&quot;</span>: song_url,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36 Edg/120.0.0.0&quot;</span><br>    &#125;<br>    data = &#123;<br>        <span class="hljs-string">&#x27;id&#x27;</span>: song_id,<br>        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-built_in">type</span><br>    &#125;<br>    response = requests.post(api, data=data, headers=headers2)<br>    result = json.loads(response.content)<br>    <span class="hljs-keyword">try</span>:<br>        song_name = result[<span class="hljs-string">&#x27;title&#x27;</span>]<br>        download_link = result[<span class="hljs-string">&#x27;url&#x27;</span>]<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载失败，原因：链接失效&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    download = requests.get(download_link)<br>    <span class="hljs-keyword">if</span> download.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;song_name&#125;</span>.mp3&quot;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            file.write(download.content)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;歌曲文件下载成功&#x27;</span>)<br>            file.close()<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载失败，原因：歌曲直链失效&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br></code></pre></td></tr></table></figure><h2 id="第五步、主程序创建"><a href="#第五步、主程序创建" class="headerlink" title="第五步、主程序创建"></a>第五步、主程序创建</h2><p>上面程序中，只能运行一次就结束运行了，创建个主程序，让它不在主动退出的情况下，能一直保持运行状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        state = search(url,headers)<br>        <span class="hljs-keyword">if</span> state:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><center>思维框架导图</center><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/yy_swdt.png" alt="image-20240118133657675"></p><p>完整代码下载链接：<a href="https://ttyun.lanzouq.com/iEu5J1lgjtda">点击进入下载</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫小练习-扒取网站小说</title>
    <link href="/2024/01/14/python_crawler_novel/"/>
    <url>/2024/01/14/python_crawler_novel/</url>
    
    <content type="html"><![CDATA[<h1 id="爬取网站小说并保存到本地の学习记录"><a href="#爬取网站小说并保存到本地の学习记录" class="headerlink" title="爬取网站小说并保存到本地の学习记录"></a>爬取网站小说并保存到本地の学习记录</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次学习级别为新手村学习，简单易懂，特别适合刚学习python的练手项目。</p><ul><li>请注意，本人提供的信息仅用于<strong>个人学习目的</strong>，并且不涉及公开或分享任何目标网站的相关链接或信息。爬取网站内容应遵守适用的法律法规、知识产权和隐私保护规定。<strong>在未获得授权的情况下，不得非法获取、使用或传播他人的数据、信息或资源。</strong>爬取操作应遵循合理的频率和并发量，以避免对目标网站造成过度负荷或干扰正常运营。<strong>本人不对任何因违反上述规定而导致的法律责任或纠纷承担责任。</strong>请确保你的行为符合相关法律法规，并尊重他人的权益和隐私。</li></ul><h3 id="爬虫的基本知识"><a href="#爬虫的基本知识" class="headerlink" title="爬虫的基本知识"></a>爬虫的基本知识</h3><p><strong>爬虫</strong>：一段自动抓取互联网信息的程序，从互联网上抓取对于我们有价值的信息。</p><ul><li><strong>调度器：</strong>相当于一台电脑的CPU，主要负责调度URL管理器、下载器、解析器之间的协调工作。</li><li><strong>URL管理器：</strong>包括待爬取的URL地址和已爬取的URL地址，防止重复抓取URL和循环抓取URL，实现URL管理器主要用三种方式，通过内存、数据库、缓存数据库来实现。</li><li><strong>网页下载器：</strong>通过传入一个URL地址来下载网页，将网页转换成一个字符串，网页下载器有urllib2（Python官方基础模块）包括需要登录、代理、和cookie，requests(第三方包)</li><li><strong>网页解析器：</strong>将一个网页字符串进行解析，可以按照我们的要求来提取出我们有用的信息，也可以根据DOM树的解析方式来解析。网页解析器有正则表达式（直观，将网页转成字符串通过模糊匹配的方式来提取有价值的信息，当文档比较复杂的时候，该方法提取数据的时候就会非常的困难）、html.parser（Python自带的）、beautifulsoup（第三方插件，可以使用Python自带的html.parser进行解析，也可以使用lxml进行解析，相对于其他几种来说要强大一些）、lxml（第三方插件，可以解析 xml 和 HTML），html.parser 和 beautifulsoup 以及 lxml 都是以 DOM 树的方式进行解析的。</li><li><strong>应用程序：</strong>就是从网页中提取的有用数据组成的一个应用。</li></ul><h2 id="需要安装的库"><a href="#需要安装的库" class="headerlink" title="需要安装的库"></a>需要安装的库</h2><ul><li>requests</li><li>bs4</li><li>re</li><li>time</li></ul><h2 id="一、构建获取小说的方法"><a href="#一、构建获取小说的方法" class="headerlink" title="一、构建获取小说的方法"></a>一、构建获取小说的方法</h2><p>打开网页，F12对小说页面内容进行分析。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/202401141551974.png"></p><p>发现小说内容都在一个id为<code>chaptercontent</code>的div标签里面，并且用<code>&lt;br&gt;</code>标签分行保存，因此我们只需要获取<code>&lt;br&gt;</code>里面的内容就行了。但一章小说分了好多页，获取下一章按钮的<code>href </code>值就能获取下一页的内容了。</p><blockquote><p>代码如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_text</span>(<span class="hljs-params">url, name, zhangjie</span>):<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36&#x27;</span>,<br>    &#125;<br>    <span class="hljs-comment"># 请求头</span><br><br>    <span class="hljs-comment"># 初始化url_line为传入的url</span><br>    url_line = url<br>    web = url[:url.find(<span class="hljs-string">&#x27;/b&#x27;</span>)]  <span class="hljs-comment"># 获取域名</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 发送请求</span><br>        response = requests.get(url_line, headers=headers)<br>        html = response.text<br><br>        <span class="hljs-comment"># 使用BeautifulSoup解析HTML内容</span><br>        soup = BeautifulSoup(html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br>        <span class="hljs-comment"># 找到章节内容和下一章的链接</span><br>        chapter_content = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;chaptercontent&#x27;</span>&#125;)<br>        next_url = soup.find(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;pb_next&#x27;</span>, class_=<span class="hljs-string">&#x27;Readpage_down js_page_down&#x27;</span>).get(<span class="hljs-string">&#x27;href&#x27;</span>)<br><br>        <span class="hljs-comment"># 拼接下一章的链接，准备进行下一次请求</span><br>        url_line = web + next_url<br><br>        text = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 存放正文内容</span><br>        end_text = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 存放“第(x-x)部分”这样的文字</span><br><br>        <span class="hljs-comment"># 如果找到了章节内容，则提取正文，并判断是否需要停止爬取</span><br>        <span class="hljs-keyword">if</span> chapter_content:<br>            paragraphs = []<br>            <span class="hljs-keyword">for</span> br_tag <span class="hljs-keyword">in</span> chapter_content.find_all(<span class="hljs-string">&#x27;br&#x27;</span>):<br>                <span class="hljs-comment"># 遍历每个&lt;br&gt;标签，找到相邻的文本节点并将其合并为一个段落</span><br>                paragraph = []<br>                next_node = br_tag.next_sibling<br>                <span class="hljs-keyword">while</span> next_node <span class="hljs-keyword">and</span> next_node.name != <span class="hljs-string">&#x27;br&#x27;</span>:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(next_node, <span class="hljs-built_in">str</span>):  <span class="hljs-comment"># 过滤掉非字符串类型节点</span><br>                        paragraph.append(next_node.strip())<br>                    next_node = next_node.next_sibling<br><br>                <span class="hljs-keyword">if</span> paragraph:<br>                    paragraphs.append(<span class="hljs-string">&#x27;&#x27;</span>.join(paragraph))<br><br>            <span class="hljs-comment"># 遍历每个段落，将正文内容和end_text保存到相应变量中</span><br>            <span class="hljs-keyword">for</span> i, paragraph <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(paragraphs):<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;第(&#x27;</span> <span class="hljs-keyword">in</span> paragraph:  <span class="hljs-comment"># 如果当前段落包含“第(x-x)部分”这样的文字</span><br>                    end_text = <span class="hljs-string">&#x27;&#x27;</span>.join(paragraph)<br>                    numbers = re.findall(<span class="hljs-string">r&#x27;\d+&#x27;</span>, end_text)<br>                    <span class="hljs-keyword">try</span>:<br>                        start = <span class="hljs-built_in">int</span>(numbers[<span class="hljs-number">0</span>])<br>                        end = <span class="hljs-built_in">int</span>(numbers[<span class="hljs-number">1</span>])<br>                    <span class="hljs-keyword">except</span>:<br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">if</span> start &gt;= end:  <span class="hljs-comment"># 如果已经爬取完全部部分，则返回True</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;(本&#x27;</span> <span class="hljs-keyword">in</span> paragraph:  <span class="hljs-comment"># 如果当前段落包含“(本章未完，请翻页)”这样的文字，则跳过</span><br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;.com&#x27;</span> <span class="hljs-keyword">in</span> paragraph:  <span class="hljs-comment"># 如果当前段落包含网站链接，则跳过</span><br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">else</span>:<br>                    text += <span class="hljs-string">&#x27;&#x27;</span>.join(paragraph) + <span class="hljs-string">&#x27;\n&#x27;</span>  <span class="hljs-comment"># 将当前段落作为正文内容的一部分</span><br><br>            <span class="hljs-comment"># 将正文内容保存到文件中，并输出提示信息</span><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(text)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;zhangjie&#125;</span>  第<span class="hljs-subst">&#123;start&#125;</span>部分下载完成。&#x27;</span>)<br>            <span class="hljs-comment"># time.sleep(0.5)</span><br><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未找到章节内容&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br></code></pre></td></tr></table></figure><h2 id="二、对目录页进行解析"><a href="#二、对目录页进行解析" class="headerlink" title="二、对目录页进行解析"></a>二、对目录页进行解析</h2><p>爬虫第一步，首先要明确直接要获取什么内容、理清整体思路。</p><ol><li>解析网站</li></ol><p>打开小说网站，随便打开一部小说的目录页面。</p><p>从表面上我们可以获取到信息有：小说名称、小说详细信息、内容简介、最新章节预览、最新章节列表。</p><ol><li><p>获取小说名字</p><p>按F12，查看网页元素结构、对网页结果进行解析。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/image-20240114122500513.png"></p><p>如图，不难找到存放小说名称的标签<code>dt</code>、属性<code>class</code>，复制链接url、用python获取一下小说名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">headers = &#123;<br>        <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36&#x27;</span>,<br>    &#125;<br><br>response = requests.get(url, headers=headers)<br>html = response.text<br>soup = BeautifulSoup(html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>name = soup.find(<span class="hljs-string">&#x27;dt&#x27;</span>, class_=<span class="hljs-string">&#x27;name&#x27;</span>).text.strip()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;小说名称：<span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还可以获取其他信息，方法一样，只需要修改标签和class的值就行</p></li><li><p>获取章节的链接</p><p>如图，章节链接都存放在属性为<code>book_last</code>的div标签里,但是这里有两个同样的标签，需要获取第二个。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/pc726.png" alt="image-20240114150028146"></p></li><li><p>获取章节名称</p><p>如上图，章节名称存放在标签<code>&lt;a&gt; &lt;a/&gt;</code>之间，在获取章节链接的同时可以同时获取章节名称</p></li><li><p>获取目录页链接</p><p>查看整个页面，一个页面只显示前面前二十章，也就是说这一页只有前面二十章的目录信息。点击下页看看。发现链接改变了</p><table><thead><tr><th><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/pc21.png" alt="原始链接"></th><th><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/pc22.png" alt="image-20240114125122786"></th></tr></thead></table><p>方法一：把2改成3跳转到了该小说的第三页 ，一次类推下去就是整部小说的章节目录了（但是这种方法有局限性）</p><p>方法二：获取下一页按钮的<code>href</code>值</p><h3 id="调用get-text方法实现下载小说"><a href="#调用get-text方法实现下载小说" class="headerlink" title="调用get_text方法实现下载小说"></a>调用get_text方法实现下载小说</h3><blockquote><p>代码如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> get_text<br><br>url = <span class="hljs-string">&#x27;https://.com/book_19922/&#x27;</span><br><br><span class="hljs-comment"># 获取域名</span><br>index = url.find(<span class="hljs-string">&#x27;/b&#x27;</span>)<br>zhangjie_url = url[url.find(<span class="hljs-string">&#x27;/b&#x27;</span>):]<br><span class="hljs-keyword">if</span> index != -<span class="hljs-number">1</span>:<br>    web = url[:index]<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未找到 &#x27;ch&#x27;&quot;</span>)<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36&#x27;</span>,<br>&#125;<br><br><span class="hljs-comment"># 发送请求获取小说首页内容</span><br>response = requests.get(url, headers=headers)<br>html = response.text<br>soup = BeautifulSoup(html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br><span class="hljs-comment"># 获取小说名称</span><br>name = soup.find(<span class="hljs-string">&#x27;dt&#x27;</span>, class_=<span class="hljs-string">&#x27;name&#x27;</span>).text.strip()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;小说名称：<span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 拼接章节url</span><br>    url_line = web + zhangjie_url<br><br>    <span class="hljs-comment"># 发送请求获取章节内容页</span><br>    response_1 = requests.get(url_line, headers=headers)<br>    html_1 = response_1.text<br>    soup_1 = BeautifulSoup(html_1, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    zhangjie_url = soup_1.find(<span class="hljs-string">&#x27;a&#x27;</span>, class_=<span class="hljs-string">&quot;onclick&quot;</span>).get(<span class="hljs-string">&#x27;href&#x27;</span>)<br><br>    <span class="hljs-comment"># 使用选择器定位符合条件的元素</span><br>    element = soup_1.select_one(<span class="hljs-string">&#x27;.book_last dl dt:-soup-contains(&quot;最新章节列表&quot;)&#x27;</span>)<br><br>    link = <span class="hljs-literal">None</span><br>    text = <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment"># 遍历获取标签里面的内容</span><br>    <span class="hljs-keyword">if</span> element:<br>        parent_element = element.parent  <span class="hljs-comment"># 获取父级元素 dl</span><br>        <span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> parent_element.find_all(<span class="hljs-string">&#x27;dd&#x27;</span>):<br>            <span class="hljs-keyword">if</span> tag.name == <span class="hljs-string">&#x27;dd&#x27;</span> <span class="hljs-keyword">and</span> tag.a:<br>                link = tag.a.get(<span class="hljs-string">&#x27;href&#x27;</span>)  <span class="hljs-comment"># 获取 href 属性的值</span><br>                text = tag.a.text.strip()  <span class="hljs-comment"># 获取文本内容</span><br>                text_url = web + link<br>                <span class="hljs-comment"># 传递小说页过去</span><br>                downld = get_text.get_text(text_url, name, text)<br>                <span class="hljs-keyword">if</span> downld:<br>                    time.sleep(<span class="hljs-number">0.5</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;text&#125;</span>下载失败，请检查&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> link <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> text <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;小说《<span class="hljs-subst">&#123;name&#125;</span>》，下载完成！&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    time.sleep(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h2 id="三、整体逻辑"><a href="#三、整体逻辑" class="headerlink" title="三、整体逻辑"></a>三、整体逻辑</h2><p>在已经获得<strong>小说目录链接</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="![目录页面](https://gcore.jsdelivr.net/gh/wechatid/image/blog/pc1.png)">[1]</span></a></sup>的前提下,创建一个循环：获取小说名字，获取目录页的章节链接，获取章节名字。然后把章节链接，小说名字，章节名字传递到获取的小说方法<code>get_text</code>里去下载章节内容，下载成功则继续下一遍循环，错误则结束运行。</p></li></ol><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/pc1.png" alt="目录页面"><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于初期建博的一些说明</title>
    <link href="/2024/01/12/blog_build/"/>
    <url>/2024/01/12/blog_build/</url>
    
    <content type="html"><![CDATA[<h1 id="关于初期建博客的一些说明"><a href="#关于初期建博客的一些说明" class="headerlink" title="关于初期建博客的一些说明"></a>关于初期建博客的一些说明</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先要特别鸣谢<strong>Fany Full’s Blog</strong>，以及<strong>WSKH0929</strong>的教程，对我的帮助真的很大。</p><ul><li><p><a href="http://fanyfull.github.io/2021/10/16/Github-Hexo-%E7%9C%9F-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-GitHub-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/">GiHub + Hexo 真·从零开始搭建个人博客</a></p></li><li><p><a href="https://blog.csdn.net/weixin_51545953/article/details/128499341">【个人博客】Hexo个人博客搭建与配置详细教程 + Fluid主题 + Gitee发布_fluid文章页设置-CSDN博客</a></p></li></ul><blockquote><p>建站参考教程 （超级详细 真从零开始）</p></blockquote><p>其实很早之前就想建一个存放学习笔记的一个博客，之前也试过从网上找的一些博客源码放在一个虚拟主机上，实在时太麻烦了，需要域名，主机，以及维护成本。后来接触到<a href="www.github.io">GitHub</a>,了解到页面托管这个功能才让我死而复燃的心决定去搞一个自己的学习博客！</p><h2 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h2><ol><li><p>github 账号</p><blockquote><p> GitHub官网<a href="https://github.com/">GitHub</a></p></blockquote></li><li><p>安装Git</p><blockquote><p>Git官网<a href="https://git-scm.com/">Git (git-scm.com)</a>，国内访问会比较慢</p><p>国内镜像网站<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">CNPM Binaries Mirror (npmmirror.com)</a></p></blockquote></li><li><p>安装Nodejs</p><blockquote><p> Node官网<a href="https://nodejs.org/en/">Node.js (nodejs.org)</a><br>在Windows上安装时务必选择全部组件，包括<code>勾选 Add to Path</code>。</p></blockquote></li><li><p>GitHub加速上网软件</p><blockquote><p> <a href="https://steampp.net/">瓦特工具箱(Steam++官网) - Watt Toolkit (steampp.net)</a> </p></blockquote><p><code>steam++在Git和PicGo上连不上GitHub，使用时要把加速关闭</code></p></li><li><p>安装PIcGo图床</p><blockquote><p> PicGo官网<a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo</a></p></blockquote></li><li><p>一个markdown编辑器</p></li></ol><blockquote><p>Nodejs必须安装，可以使用cdm命令行检验是否安装成功（图为安装成功示例）</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/202401121110565.png" alt="image-20240112110858062"></p></blockquote><h2 id="建一个Page托管的仓库"><a href="#建一个Page托管的仓库" class="headerlink" title="建一个Page托管的仓库"></a>建一个Page托管的仓库</h2><ol><li><p>登录你的GitHub账号</p></li><li><p>新建仓库，仓库名为<code>username.github.io</code>，username替换为GitHub账户的实际ID，例如：wechatid.github.io ，实际博客地址就是 <a href="https://wechatid.github.io/">https://wechatid.github.io</a> </pr></p><p><img src="https://gcore.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016165332.png"></p><ol start="3"><li>配置页面托管</li></ol><p>​<img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/202401121255222.png" alt="image-20240112125530706"></p><blockquote><p>注意：每个用户只能开启一个pages托管</p></blockquote></li></ol><h2 id="Git配置用户信息"><a href="#Git配置用户信息" class="headerlink" title="Git配置用户信息"></a>Git配置用户信息</h2><ol><li><p>在电脑本地新建文件夹，用来存放博客的所有文件。我的是“blog”，所以下面就说的blog文件夹实际就是存放博客的文件夹。</p></li><li><p>打开blog文件夹，右击鼠标，点击<code>Git Bash here</code>，弹出命令窗口。</p></li><li><p>在窗口中输入下面两行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-comment"># user_name填入GitHub用户名</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;user_email&quot;</span> <span class="hljs-comment"># user_email填入GitHub注册的邮箱</span><br></code></pre></td></tr></table></figure></li></ol><blockquote><p>查看或者检验Git用户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.email<br></code></pre></td></tr></table></figure></blockquote><h2 id="Git-与GitHub建立ssh连接"><a href="#Git-与GitHub建立ssh连接" class="headerlink" title="Git 与GitHub建立ssh连接"></a>Git 与GitHub建立ssh连接</h2><ol><li><p>在blog文件夹内打开<code>Git Bash here</code>命令窗口，输入命令后，按三次回车，默认不设置密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;user.email&quot;</span> <span class="hljs-comment"># user.email 为GitHub 上注册的邮箱</span><br></code></pre></td></tr></table></figure></li><li><p>打开电脑文件夹<code>C:\Users\username\.ssh</code>,username是你的电脑账号名称。如果没有<code>.ssh</code>文件夹请点击<code>查看-显示-隐藏的项目</code>。</p></li><li><p>找到<code>id_rsa.pub</code>,用记事本打开，全选复制。</p><p>Ps：<code>id_rsa</code> 是私钥不能泄露，<code>id_rsa.pub</code> 是公钥可以放心告诉他人。</p></li><li><p>打开<a href="https://github.com/settings/ssh/new">Add new SSH key (github.com)</a>页面，新建一个SSH Keys</p><p>Title随便写，Key粘贴刚刚复制的内容。</p><p><img src="http://gcore.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172518.png"></p></li><li><p>使用下面命令验证是否连接成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>连接成功会提示<code>”Hi username...“</code></p><p><img src="https://gcore.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172942.png"></p></li></ol><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><h3 id="什么是hexo"><a href="#什么是hexo" class="headerlink" title="什么是hexo"></a>什么是hexo</h3><p><code>Hexo</code> 是一个简单、快速、强大的基于 <code>Github Pages</code> 的博客框架，支持 <code>Markdown</code> 格式，有众多优秀插件和主题。</p><h3 id="Hexo原理"><a href="#Hexo原理" class="headerlink" title="Hexo原理"></a>Hexo原理</h3><p>由于 <code>Github Pages</code> 存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以 <code>Hexo</code> 所做的就是将这些 <code>md</code> 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到<code>github</code></p><h3 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h3><ol><li><p>在blog文件夹内打开<code>Git Bash here</code>命令窗口，输入命令安装<code>hexo</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>安装完成后，输入命令进行初始化设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016174011.png"></p></li></ol><h3 id="本地渲染与预览"><a href="#本地渲染与预览" class="headerlink" title="本地渲染与预览"></a>本地渲染与预览</h3><ol><li><p>输入命令，生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure></li><li><p>执行下面命令，开启本地预览。在浏览器中打开<code>http://localhost:4000/</code>，即可以看到初始化完成后的博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>如果本地预览出问题了，请按顺序输入命令<code>hexo g</code>,<code>hexo clean</code>,<code>hexo s</code></p></blockquote><h2 id="推送前准备"><a href="#推送前准备" class="headerlink" title="推送前准备"></a>推送前准备</h2><h3 id="配置站点文件"><a href="#配置站点文件" class="headerlink" title="配置站点文件"></a>配置站点文件</h3><p><code>hexo</code> 有 2 种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 <code>theme</code> 下的 <code>_config.yml</code>。将前者称为<strong>站点</strong>配置文件， 后者称为<strong>主题</strong>配置文件。</p><p>打开blog目录下站点配置文件 <code>_config.yml</code>，配置有关 <code>deploy</code> 的部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>打开仓库点击Code-SHH复制**<code>repo</code>**</p><p><code>branch</code>一般是main ，可以在仓库里面看</p><h3 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h3><p>在<code>Git Bash here</code>输入安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save <span class="hljs-comment"># 安装部署插件</span><br></code></pre></td></tr></table></figure><p>如果没有安装部署插件，<code>hexo d</code>会报错</p><p>到这里，如果不用fluid主题的话，可以直接推送到GitHub，<a href="#%E6%8E%A8%E9%80%81%E5%88%B0Github">点我跳转推送标题</a></p><h2 id="配置-fluid-主题"><a href="#配置-fluid-主题" class="headerlink" title="配置 fluid 主题"></a>配置 fluid 主题</h2><h3 id="安装Fluid主题"><a href="#安装Fluid主题" class="headerlink" title="安装Fluid主题"></a>安装Fluid主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在blog目录下创建 <code>_config.fluid.yml</code>，将<code>_config.yml</code>内容复制过去。</p><h3 id="应用fluid主题"><a href="#应用fluid主题" class="headerlink" title="应用fluid主题"></a>应用fluid主题</h3><p>修改blog目录下<code>_config.yml</code>的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>最好连<code>_config.fluid.yml</code>的也改了</p><h3 id="创建关于页"><a href="#创建关于页" class="headerlink" title="创建关于页"></a>创建关于页</h3><p>使用命令<code>hexo new page about</code></p><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><blockquote><p><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p></blockquote><h2 id="推送到Github"><a href="#推送到Github" class="headerlink" title="推送到Github"></a>推送到Github</h2><p>在安装部署插件之后，如果发生修改了，需要重新渲染主题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p>推送到GitHub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>新建文章执行命令：<code>hexo new &quot;name&quot;</code></p><p>新建文章：打开<code>blog\source\_posts</code>目录，新建一个<strong>md</strong>类型的文件，文件名就是文章标题。</p><p>删除文章：打开<code>blog\source\_posts</code>目录，选择你要删除的文章，删除。然后重新渲染预览就删除了。</p><p>文章头部文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">关于初期建博的一些说明</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2024-01-12 09:04:49</span><br><span class="hljs-attr">tags:</span> <span class="hljs-string">博客</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">博客</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">https://gcore.jsdelivr.net/gh/wechatid/image/blog/202401120852183.jpg</span><br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://gcore.jsdelivr.net/gh/wechatid/image/blog/202401120852183.jpg</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="right">键</th><th align="left">值</th></tr></thead><tbody><tr><td align="right">title</td><td align="left">文章名称</td></tr><tr><td align="right">date</td><td align="left">文章发布时间</td></tr><tr><td align="right">tags</td><td align="left">标签</td></tr><tr><td align="right">categories</td><td align="left">分类</td></tr><tr><td align="right">index_img</td><td align="left">封面图</td></tr><tr><td align="right">banner_img</td><td align="left">顶部图</td></tr></tbody></table><blockquote><p>其中<code>tags</code>标签,<code>categories</code>分类都可以定义多个，如<code>[博客,学习,代码]</code></p></blockquote><blockquote><p>英文冒号后面留一个<strong>空格</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
