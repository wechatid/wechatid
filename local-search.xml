<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>易班自动发帖的猴油脚本</title>
    <link href="/2024/11/06/Yiban-JSmonkey/"/>
    <url>/2024/11/06/Yiban-JSmonkey/</url>
    
    <content type="html"><![CDATA[<h1 id="易班自动发帖的猴油脚本"><a href="#易班自动发帖的猴油脚本" class="headerlink" title="易班自动发帖的猴油脚本"></a>易班自动发帖的猴油脚本</h1><p>发贴能获取5网薪，一天发20次能获得100+网薪和经验值。</p><p>本猴油脚本能够完全解放你的双手，实现自动输入内容，自动发布和自动识别验证码。</p><p>只需要打开页面，什么都不干，自动执行就好。</p><h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><p>1</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>2</p><h2 id="QQ群聊"><a href="#QQ群聊" class="headerlink" title="QQ群聊"></a>QQ群聊</h2><p>3</p><h2 id="卡密购买地址"><a href="#卡密购买地址" class="headerlink" title="卡密购买地址"></a>卡密购买地址</h2><p>4</p>]]></content>
    
    
    <categories>
      
      <category>猴油脚本</category>
      
      <category>js</category>
      
      <category>易班网薪</category>
      
    </categories>
    
    
    <tags>
      
      <tag>猴油脚本</tag>
      
      <tag>js</tag>
      
      <tag>易班网薪</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于fastapi实现带token登录注册并限制频繁登录</title>
    <link href="/2024/10/12/Fastapi-login/"/>
    <url>/2024/10/12/Fastapi-login/</url>
    
    <content type="html"><![CDATA[<h1 id="基于fastapi实现登录注册"><a href="#基于fastapi实现登录注册" class="headerlink" title="基于fastapi实现登录注册"></a>基于fastapi实现登录注册</h1><p>此项目主要实现功能有：</p><ul><li><p>登录</p></li><li><p>注册</p></li><li><p>登录次数时间限制</p></li><li><p>token验证</p></li></ul><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>python3.8+</li><li>mysql Ver 8.0.37 for Win64社区版</li><li>以及python中需要的库：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">fastapi==<span class="hljs-number">0.115</span><span class="hljs-number">.0</span><br>jose==<span class="hljs-number">1.0</span><span class="hljs-number">.0</span><br>pandas==<span class="hljs-number">2.0</span><span class="hljs-number">.3</span><br>passlib==<span class="hljs-number">1.7</span><span class="hljs-number">.4</span><br>pydantic==<span class="hljs-number">2.9</span><span class="hljs-number">.2</span><br>python_jose==<span class="hljs-number">3.3</span><span class="hljs-number">.0</span><br>pytz==<span class="hljs-number">2023.3</span>.post1<br>SQLAlchemy==<span class="hljs-number">2.0</span><span class="hljs-number">.30</span><br>starlette==<span class="hljs-number">0.39</span><span class="hljs-number">.2</span><br>uvicorn==<span class="hljs-number">0.31</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><p>database.py：数据库连接引擎（配置）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一步，导入SQLAlchemy库</span><br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine<br><span class="hljs-keyword">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker<br><span class="hljs-comment"># 第二步，创建数据连接引擎</span><br><span class="hljs-comment"># engine = create_engine(&quot;mysql://数据库账号:密码@数据库地址/数据库名称&quot;)</span><br><span class="hljs-comment"># engine = create_engine(&quot;mysql://root:211211@localhost/cxk&quot;)        </span><br>engine = create_engine(<span class="hljs-string">&quot;mysql+pymysql://root:123456@localhost/cxk&quot;</span>)   <br><br><span class="hljs-comment"># 第三步，创建本地会话</span><br>SessionLocal = sessionmaker(autocommit=<span class="hljs-literal">False</span>, autoflush=<span class="hljs-literal">False</span>, bind=engine)<br><span class="hljs-comment"># 第四步，创建数据模型基类</span><br>Base = declarative_base()<br><br></code></pre></td></tr></table></figure><p>此后在main.py创建一个依赖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据库连接依赖</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_db</span>():<br>    db = database.SessionLocal()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> db<br>    <span class="hljs-keyword">finally</span>:<br>        db.close()<br></code></pre></td></tr></table></figure><h3 id="建立数据模型"><a href="#建立数据模型" class="headerlink" title="建立数据模型"></a>建立数据模型</h3><p>数据模型是在请求或者连接数据中不可缺少的一个数据整体，保证数据的完整。</p><h4 id="pydantic数据模型-（接口使用）"><a href="#pydantic数据模型-（接口使用）" class="headerlink" title="pydantic数据模型 （接口使用）"></a>pydantic数据模型 （接口使用）</h4><p>建立一个<code>datamodles.py</code>存放此数据模型</p><p>用户信息模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 基础用户信息</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">userBase</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    username: <span class="hljs-built_in">str</span><br>    fullname: <span class="hljs-built_in">str</span><br>    useremail: <span class="hljs-built_in">str</span><br>    created_at: datetime<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">userCreate</span>(<span class="hljs-title class_ inherited__">userBase</span>):<br>    password: <span class="hljs-built_in">str</span><br><br><br><span class="hljs-comment"># 数据模型，用户，继承自UserBase</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">userBase</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span>:<br>        orm_mode = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>登录信息模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInfo</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    username: <span class="hljs-built_in">str</span><br>    login_state: <span class="hljs-built_in">bool</span><br>    user_ip: <span class="hljs-built_in">str</span><br>    error_count: <span class="hljs-built_in">int</span><br>    login_time: <span class="hljs-built_in">str</span><br></code></pre></td></tr></table></figure><h4 id="sqlalchemy数据模型（数据库操作）"><a href="#sqlalchemy数据模型（数据库操作）" class="headerlink" title="sqlalchemy数据模型（数据库操作）"></a>sqlalchemy数据模型（数据库操作）</h4><p>建立一个<code>SQLModles.py</code>来存放此数据模型。</p><p>pydantic数据模型的数据结构要与sqlalchemy数据模型的一致。</p><p>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInDB</span>(<span class="hljs-title class_ inherited__">Base</span>):  <span class="hljs-comment"># 定义用户表，继承自Base</span><br>    __tablename__ = <span class="hljs-string">&quot;user&quot;</span><br>    <span class="hljs-built_in">id</span> = Column(Integer, primary_key=<span class="hljs-literal">True</span>, index=<span class="hljs-literal">True</span>)<br>    username = Column(<span class="hljs-string">&#x27;username&#x27;</span>, String(<span class="hljs-number">50</span>), unique=<span class="hljs-literal">True</span>, index=<span class="hljs-literal">True</span>)<br>    fullname = Column(<span class="hljs-string">&#x27;fullname&#x27;</span>, String(<span class="hljs-number">200</span>), unique=<span class="hljs-literal">True</span>)<br>    useremail = Column(<span class="hljs-string">&#x27;useremail&#x27;</span>, String(<span class="hljs-number">100</span>))<br>    created_at = Column(DateTime, default=datetime.utcnow)<br>    hashed_password = Column(<span class="hljs-string">&#x27;hashed_password&#x27;</span>, String(<span class="hljs-number">64</span>))<br><br>    login_infos = relationship(<span class="hljs-string">&quot;LoginInfo&quot;</span>, back_populates=<span class="hljs-string">&quot;user&quot;</span>)<br><br><br><span class="hljs-comment"># 登录信息记录表</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInfo</span>(<span class="hljs-title class_ inherited__">Base</span>):<br>    __tablename__ = <span class="hljs-string">&quot;loginInfo&quot;</span><br>    <span class="hljs-built_in">id</span> = Column(Integer, primary_key=<span class="hljs-literal">True</span>, index=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 添加主键</span><br>    username = Column(String(<span class="hljs-number">50</span>), ForeignKey(<span class="hljs-string">&#x27;user.username&#x27;</span>), index=<span class="hljs-literal">True</span>)<br>    login_state = Column(Boolean, default=<span class="hljs-literal">False</span>)<br>    user_ip = Column(String(<span class="hljs-number">200</span>))<br>    error_count = Column(Integer, default=<span class="hljs-number">0</span>)<br>    login_time = Column(DateTime, default=datetime.utcnow)<br><br>    user = relationship(<span class="hljs-string">&quot;UserInDB&quot;</span>, back_populates=<span class="hljs-string">&quot;login_infos&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="注册实现"><a href="#注册实现" class="headerlink" title="注册实现"></a>注册实现</h3><p>注册功能实现简单点就是在数据库的用户信息表增加一条数据。</p><p>建<code>crud.py</code>存放数据库操作的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个用户</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_user</span>(<span class="hljs-params">db: Session, user: datamodles.userCreate</span>):<br>    <span class="hljs-comment"># 计算密码的哈希值</span><br>    hashed_password = get_password_hash(user.password)<br>    db_user = SQLModles.UserInDB(<br>        username=user.username,<br>        fullname=user.fullname,<br>        created_at=user.created_at,<br>        hashed_password=hashed_password,<br>        useremail=user.useremail<br>    )<br>    db.add(db_user)<br>    db.commit()<br>    db.refresh(db_user)<br>    <span class="hljs-keyword">return</span> db_user<br></code></pre></td></tr></table></figure><h5 id="其中哈希密码加密和验证可以另外建一个utils-py存放，如下"><a href="#其中哈希密码加密和验证可以另外建一个utils-py存放，如下" class="headerlink" title="其中哈希密码加密和验证可以另外建一个utils.py存放，如下"></a>其中哈希密码加密和验证可以另外建一个<code>utils.py</code>存放，如下</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 哈希密码生成</span><br><span class="hljs-keyword">from</span> passlib.context <span class="hljs-keyword">import</span> CryptContext<br><br>_pwd_context = CryptContext(schemes=[<span class="hljs-string">&quot;bcrypt&quot;</span>], deprecated=<span class="hljs-string">&quot;auto&quot;</span>)<br><br><br><span class="hljs-comment"># 验证密码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_password</span>(<span class="hljs-params">plain_password, hashed_password</span>):<br>    <span class="hljs-keyword">return</span> _pwd_context.verify(plain_password, hashed_password)<br><br><br><span class="hljs-comment"># 生成密码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_password_hash</span>(<span class="hljs-params">password</span>):<br>    <span class="hljs-keyword">return</span> _pwd_context.<span class="hljs-built_in">hash</span>(password)<br></code></pre></td></tr></table></figure><h5 id="注册接口"><a href="#注册接口" class="headerlink" title="注册接口"></a>注册接口</h5><p>接口一律都在<code>main.py</code>里完成，或者写在路由表里更好，这里就放在了main里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/user-register&quot;</span>, response_model=datamodles.User</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">user: datamodles.userCreate, db: Session = Depends(<span class="hljs-params">get_db</span>)</span>):<br>    dbuser = crud.get_user(db, user.username)<br>    <span class="hljs-keyword">if</span> dbuser:<br>        <span class="hljs-keyword">raise</span> HTTPException(<br>            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,<br>            detail=<span class="hljs-string">&quot;用户名已存在&quot;</span>  <span class="hljs-comment"># 非Auth2，无需添加</span><br>        )<br>    <span class="hljs-keyword">return</span> crud.create_user(db, user)<br></code></pre></td></tr></table></figure><h3 id="登录实现"><a href="#登录实现" class="headerlink" title="登录实现"></a>登录实现</h3><p>登录其实就是根据提交的账号密码和数据库里面的对比一下，正确就返回token就行了。</p><p>这里增加了登录次数限制这个步骤。</p><p><code>crud.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用户查询第一个</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user</span>(<span class="hljs-params">db: Session, username: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">return</span> db.query(SQLModles.UserInDB).<span class="hljs-built_in">filter</span>(SQLModles.UserInDB.username == username).first()<br></code></pre></td></tr></table></figure><p>下面这里实现的是<em>登录次数限制</em>和<em>登录错误的记录</em>：</p><p><code>crud.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 检查登录次数</span><br><span class="hljs-comment"># 写的有点鸡肋</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login_verification</span>(<span class="hljs-params">db: Session, username, user_ip</span>):<br>    last_info = db.query(SQLModles.LoginInfo).<span class="hljs-built_in">filter</span>(SQLModles.LoginInfo.username == username).order_by(<br>        SQLModles.LoginInfo.<span class="hljs-built_in">id</span>.desc()).first()<br>    <span class="hljs-keyword">if</span> last_info:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> last_info.login_state:<br>            <span class="hljs-keyword">if</span> last_info.error_count &gt;= <span class="hljs-number">5</span>:<br>                time_difference = datetime.now() - last_info.login_time<br>                total_seconds = time_difference.total_seconds()<br>                <span class="hljs-keyword">if</span> total_seconds &lt;= <span class="hljs-number">300</span>:  <span class="hljs-comment"># 时间差是五分钟</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">else</span>:<br>                    last_info.error_count += <span class="hljs-number">1</span><br>                    last_info.login_time = datetime.now()<br>                    db.commit()<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                last_info.error_count += <span class="hljs-number">1</span><br>                last_info.login_time = datetime.now()<br>                db.commit()<br>        <span class="hljs-keyword">else</span>:<br>            info = SQLModles.LoginInfo(<br>                username=username,<br>                login_state=<span class="hljs-literal">False</span>,<br>                user_ip=user_ip,<br>                error_count=<span class="hljs-number">1</span>,<br>                login_time=datetime.now()<br>            )<br>            db.add(info)<br>            db.commit()<br>            db.refresh(info)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        info = SQLModles.LoginInfo(<br>            username=username,<br>            login_state=<span class="hljs-literal">False</span>,<br>            user_ip=user_ip,<br>            error_count=<span class="hljs-number">1</span>,<br>            login_time=datetime.now()<br>        )<br>        db.add(info)<br>        db.commit()<br>        db.refresh(info)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>账号密码的验证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">verification_user</span>(<span class="hljs-params">db: Session, username: <span class="hljs-built_in">str</span>, password: <span class="hljs-built_in">str</span>, user_ip: <span class="hljs-built_in">str</span></span>):<br>    user = get_user(db, username)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    login_restriction = login_verification(db, username, user_ip)<br>    <span class="hljs-comment"># 登录限制，True限制</span><br>    <span class="hljs-keyword">if</span> login_restriction:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;restriction&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> verify_password(password, user.hashed_password):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;no_restriction&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> user<br></code></pre></td></tr></table></figure><p>登录成功后记录登录信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 登录信息表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login_info_submit</span>(<span class="hljs-params">db: Session, username: <span class="hljs-built_in">str</span>, user_ip: <span class="hljs-built_in">str</span></span>):<br>    l_info_data = SQLModles.LoginInfo(<br>        username=username,<br>        login_state=<span class="hljs-number">1</span>,<br>        user_ip=user_ip,<br>        error_count=<span class="hljs-number">0</span>,<br>        login_time=datetime.now()<br>    )<br>    db.add(l_info_data)<br>    db.commit()<br>    db.refresh(l_info_data)<br>    <span class="hljs-keyword">return</span> l_info_data<br></code></pre></td></tr></table></figure><p>获取最新的登录成功的信息（上一次登录时间）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">last_login_True</span>(<span class="hljs-params">db: Session, username: <span class="hljs-built_in">str</span></span>):<br>    info = db.query(SQLModles.LoginInfo) \<br>        .<span class="hljs-built_in">filter</span>(SQLModles.LoginInfo.username == username, SQLModles.LoginInfo.login_state == <span class="hljs-number">1</span>) \<br>        .order_by(SQLModles.LoginInfo.<span class="hljs-built_in">id</span>.desc()) \<br>        .first()<br>    <span class="hljs-keyword">return</span> info<br></code></pre></td></tr></table></figure><h5 id="获取登录IP"><a href="#获取登录IP" class="headerlink" title="获取登录IP"></a>获取登录IP</h5><p>这个在<code>main.py</code>里跟路由表一起：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取IP</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getIp</span>(<span class="hljs-params">request: rqtIP</span>):<br>    client_host_ip = request.client.host<br>    <span class="hljs-keyword">return</span> client_host_ip<br></code></pre></td></tr></table></figure><h5 id="生成token（令牌）"><a href="#生成token（令牌）" class="headerlink" title="生成token（令牌）"></a>生成token（令牌）</h5><p><code>crud.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用命令获取SECRET_KEY:</span><br><span class="hljs-comment"># openssl rand -hex 32</span><br><span class="hljs-comment"># 密钥</span><br>SECRET_KEY = <span class="hljs-string">&quot;&quot;</span><br>ALGORITHM = <span class="hljs-string">&quot;HS256&quot;</span>  <span class="hljs-comment"># 算法</span><br>ACCESS_TOKEN_EXPIRE_MINUTES = <span class="hljs-number">480</span>  <span class="hljs-comment"># 令牌有效期  单位：分钟</span><br><br><br><span class="hljs-comment"># 创建令牌，将用户名放进令牌</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_token</span>(<span class="hljs-params">data: <span class="hljs-built_in">dict</span></span>):<br>    to_encode = data.copy()<br>    expires_delta = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)<br>    expire = datetime.now() + expires_delta<br>    expire = <span class="hljs-built_in">int</span>(expire.timestamp())<br>    to_encode.update(&#123;<span class="hljs-string">&quot;exp&quot;</span>: <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(expire)&#125;</span>&#x27;</span>&#125;)<br>    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)<br>    <span class="hljs-keyword">return</span> encoded_jwt<br><br><br><span class="hljs-comment"># 解析令牌，返回用户名</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_token</span>(<span class="hljs-params">token: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    如果签名过期了会报错</span><br><span class="hljs-string">    :param token:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])<br>    <span class="hljs-keyword">return</span> payload<br></code></pre></td></tr></table></figure><h5 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h5><p><code>main.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/user-login&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">userLogin</span>(<span class="hljs-params">request: rqtIP,</span><br><span class="hljs-params">                    form: OAuth2PasswordRequestForm = Depends(<span class="hljs-params"></span>),</span><br><span class="hljs-params">                    db: Session = Depends(<span class="hljs-params">get_db</span>)</span>):<br>    user_ip = request.client.host<br>    user = crud.verification_user(db, form.username, form.password,user_ip)<br>    <span class="hljs-keyword">if</span> user == <span class="hljs-string">&quot;restriction&quot;</span>:<br>        <span class="hljs-keyword">raise</span> HTTPException(<br>            status_code=status.HTTP_401_UNAUTHORIZED,<br>            detail=<span class="hljs-string">&quot;请五分钟之后再尝试&quot;</span>,<br>            headers=&#123;<span class="hljs-string">&quot;WWW-Authenticate&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span>&#125;,<br>        )<br>    <span class="hljs-keyword">elif</span> user == <span class="hljs-string">&quot;no_restriction&quot;</span>:<br>        <span class="hljs-keyword">raise</span> HTTPException(<br>            status_code=status.HTTP_401_UNAUTHORIZED,<br>            detail=<span class="hljs-string">&quot;用户名或密码无效&quot;</span>,<br>            headers=&#123;<span class="hljs-string">&quot;WWW-Authenticate&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span>&#125;,<br>        )<br>    <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> user:<br>        <span class="hljs-keyword">raise</span> HTTPException(<br>            status_code=status.HTTP_401_UNAUTHORIZED,<br>            detail=<span class="hljs-string">&quot;用户名或密码无效&quot;</span>,<br>            headers=&#123;<span class="hljs-string">&quot;WWW-Authenticate&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span>&#125;,<br>        )<br><br>    crud.login_info_submit(db, form.username, user_ip)<br>    access_token = crud.create_token(data=&#123;<span class="hljs-string">&quot;username&quot;</span>: user.username&#125;)  <span class="hljs-comment"># 发放令牌</span><br>    <span class="hljs-comment"># # 将访问令牌存储在 Cookie 中</span><br>    response = Response()<br>    response.set_cookie(key=<span class="hljs-string">&quot;access_token&quot;</span>, value=access_token, httponly=<span class="hljs-literal">True</span>, max_age=<span class="hljs-number">3600</span>)  <span class="hljs-comment"># 设置过期时间为 1 小时</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;access_token&quot;</span>: access_token, <span class="hljs-string">&quot;token_type&quot;</span>: <span class="hljs-string">&quot;bearer&quot;</span>&#125;  <span class="hljs-comment"># 返回令牌</span><br></code></pre></td></tr></table></figure><h3 id="html响应"><a href="#html响应" class="headerlink" title="html响应"></a>html响应</h3><p><code>main.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ↓前端页面</span><br>app.mount(<span class="hljs-string">&quot;/static&quot;</span>, StaticFiles(directory=<span class="hljs-string">&quot;web&quot;</span>), name=<span class="hljs-string">&quot;web&quot;</span>)<br>templates = Jinja2Templates(directory=<span class="hljs-string">&quot;web&quot;</span>)<br><br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span>, response_class=HTMLResponse</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">index_fist</span>(<span class="hljs-params">request: Request</span>):<br>    <span class="hljs-keyword">return</span> templates.TemplateResponse(<span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&quot;request&quot;</span>: request&#125;)<br><br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&#123;page&#125;&quot;</span>, response_class=HTMLResponse</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">webpage</span>(<span class="hljs-params">request: Request, page: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;login&#x27;</span></span>):<br>    <span class="hljs-comment"># 检查路由路径，返回对应的HTML页面</span><br>    <span class="hljs-keyword">if</span> page == <span class="hljs-string">&quot;&quot;</span>:<br>        <span class="hljs-keyword">return</span> templates.TemplateResponse(<span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&quot;request&quot;</span>: request&#125;)<br>    <span class="hljs-keyword">elif</span> page == <span class="hljs-string">&#x27;register&#x27;</span>:<br>        <span class="hljs-keyword">return</span> templates.TemplateResponse(<span class="hljs-string">&#x27;register.html&#x27;</span>, &#123;<span class="hljs-string">&quot;request&quot;</span>: request&#125;)<br>    <span class="hljs-keyword">elif</span> page == <span class="hljs-string">&#x27;login&#x27;</span>:<br>        <span class="hljs-keyword">return</span> templates.TemplateResponse(<span class="hljs-string">&#x27;login.html&#x27;</span>, &#123;<span class="hljs-string">&quot;request&quot;</span>: request&#125;)<br>    <span class="hljs-keyword">elif</span> page == <span class="hljs-string">&#x27;index&#x27;</span>:<br>        <span class="hljs-keyword">return</span> templates.TemplateResponse(<span class="hljs-string">&#x27;index.html&#x27;</span>, &#123;<span class="hljs-string">&quot;request&quot;</span>: request&#125;)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;兄弟你越界了这里没有你想要的东西&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h3><p>前端页面：<a href="https://gitee.com/wechatid/study/tree/master/web">登录注册源码</a></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://gitee.com/wechatid/study/">fastapi登录注册</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>fastapi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>fastapi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟采集炼铁高炉数据可视化与工单系统</title>
    <link href="/2024/09/22/DataViewPro/"/>
    <url>/2024/09/22/DataViewPro/</url>
    
    <content type="html"><![CDATA[<h1 id="数据采集与可视化监控工单处理系统——炼铁高炉"><a href="#数据采集与可视化监控工单处理系统——炼铁高炉" class="headerlink" title="数据采集与可视化监控工单处理系统——炼铁高炉"></a>数据采集与可视化监控工单处理系统——炼铁高炉</h1><h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><p>随着工业自动化和数字化的不断发展，对炼铁高炉的生产状态进行实时监控变得尤为重要。本项目旨在通过高效的数据采集与可视化监控工单处理系统，实时监测高炉内的温度、压力和运行状态。该系统能够及时生成工单，快速反馈给维保人员，确保对异常情况的快速响应和处理。通过精确的数据分析与可视化展示，提升生产效率，降低故障率，最终实现炼铁高炉的安全、稳定与高效运行。</p><h2 id="项目截图"><a href="#项目截图" class="headerlink" title="项目截图"></a>项目截图</h2><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/dataviewpicter2.jpg" alt="img"></p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/dataviewpicter3.jpg" alt="img"></p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/dataviewpicter4.png" alt="img"></p><h2 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h2><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/dataviewFramework.png" alt="炼铁高炉数据采集与可视化监控工单处理系统"></p><h2 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h2><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/dataviewFile.png" alt="项目框架"></p><h2 id="项目前准备"><a href="#项目前准备" class="headerlink" title="项目前准备"></a>项目前准备</h2><ol><li>python3.8以上环境</li><li>pycharm编辑器</li><li>mysql数据库</li><li>导入所需的库[^所需库]</li></ol><h3 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h3><p>成功安装mysql数据库之后，导入SQLAlchemy库，并对数据库创建连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一步，导入SQLAlchemy库</span><br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine<br><span class="hljs-keyword">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker<br><span class="hljs-comment"># 第二步，创建数据连接引擎</span><br>engine = create_engine(<span class="hljs-string">&quot;mysql+pymysql://root:123456@localhost/produce&quot;</span>)        <span class="hljs-comment"># 数据库地址</span><br><span class="hljs-comment"># engine = create_engine(&quot;mysql+pymysql://admin:123456@localhost:54321/test1&quot;)</span><br><br><span class="hljs-comment"># 第三步，创建本地会话</span><br>SessionLocal = sessionmaker(autocommit=<span class="hljs-literal">False</span>, autoflush=<span class="hljs-literal">False</span>, bind=engine)<br><span class="hljs-comment"># 第四步，创建数据模型基类</span><br>Base = declarative_base()<br></code></pre></td></tr></table></figure><p>随后在<code>main.py</code>里创建一个依赖项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_db</span>():<br>    db = database.SessionLocal()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> db<br>    <span class="hljs-keyword">finally</span>:<br>        db.close()<br></code></pre></td></tr></table></figure><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>高炉数据模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Devices</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">int</span><br>    code: <span class="hljs-built_in">int</span><br>    ranshaodaiwen: <span class="hljs-built_in">int</span><br>    shangbuwen: <span class="hljs-built_in">int</span><br>    rongrongdaiwen: <span class="hljs-built_in">int</span><br>    xiabuwen: <span class="hljs-built_in">int</span><br>    lengfengya: <span class="hljs-built_in">float</span><br>    refengya: <span class="hljs-built_in">float</span><br>    ludingya: <span class="hljs-built_in">float</span><br>    clienttoken: <span class="hljs-built_in">str</span><br>    mqtimestamp: <span class="hljs-built_in">int</span><br>    dttime: datetime<br></code></pre></td></tr></table></figure><p>工单数据模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Abnormals</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">int</span><br>    device_id: <span class="hljs-built_in">int</span><br>    state: <span class="hljs-built_in">str</span><br>    time: datetime<br>    msg: <span class="hljs-built_in">str</span><br>    charge: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span><br>    worker: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span><br>    repair_time: <span class="hljs-type">Optional</span>[datetime] = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>用户信息模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据模型基类-用户信息</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserBase</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    username: <span class="hljs-built_in">str</span><br>    email: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span><br>    full_name: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span><br><br><br><span class="hljs-comment"># 数据模型，创建用户，继承自UserBase</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserCreate</span>(<span class="hljs-title class_ inherited__">UserBase</span>):<br>    password: <span class="hljs-built_in">str</span><br><br><br><span class="hljs-comment"># 数据模型，用户，继承自UserBase</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(<span class="hljs-title class_ inherited__">UserBase</span>):<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span>:<br>        orm_mode = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>响应模型-令牌</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Token</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    access_token: <span class="hljs-built_in">str</span><br>    token_type: <span class="hljs-built_in">str</span><br></code></pre></td></tr></table></figure><p>可视化数据模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Devices_dataView</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    code: <span class="hljs-built_in">int</span><br>    dttime: datetime<br>    ranshaodaiwen: <span class="hljs-built_in">int</span><br>    shangbuwen: <span class="hljs-built_in">int</span><br>    rongrongdaiwen: <span class="hljs-built_in">int</span><br>    xiabuwen: <span class="hljs-built_in">int</span><br>    lengfengya: <span class="hljs-built_in">float</span><br>    refengya: <span class="hljs-built_in">float</span><br>    ludingya: <span class="hljs-built_in">float</span><br></code></pre></td></tr></table></figure><h3 id="数据库数据模型"><a href="#数据库数据模型" class="headerlink" title="数据库数据模型"></a>数据库数据模型</h3><p>用户表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInDB</span>(<span class="hljs-title class_ inherited__">Base</span>):  <span class="hljs-comment"># 定义用户表，继承自Base</span><br>    __tablename__ = <span class="hljs-string">&quot;user&quot;</span><br>    <span class="hljs-built_in">id</span> = Column(Integer, primary_key=<span class="hljs-literal">True</span>, index=<span class="hljs-literal">True</span>)<br>    username = Column(<span class="hljs-string">&#x27;username&#x27;</span>, String(<span class="hljs-number">50</span>))<br>    full_name = Column(<span class="hljs-string">&#x27;full_name&#x27;</span>, String(<span class="hljs-number">50</span>))<br>    email = Column(<span class="hljs-string">&#x27;email&#x27;</span>, String(<span class="hljs-number">100</span>))<br>    hashed_password = Column(<span class="hljs-string">&#x27;hashed_password&#x27;</span>, String(<span class="hljs-number">64</span>))<br></code></pre></td></tr></table></figure><p>设备数据表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Devices</span>(<span class="hljs-title class_ inherited__">Base</span>):<br>    <span class="hljs-comment"># 指定数据库中对应的表名</span><br>    __tablename__ = <span class="hljs-string">&quot;device&quot;</span><br>    <span class="hljs-built_in">id</span> = Column(Integer, primary_key=<span class="hljs-literal">True</span>, index=<span class="hljs-literal">True</span>)<br>    code = Column(Integer)<br>    ranshaodaiwen = Column(Integer)<br>    shangbuwen = Column(Integer)<br>    rongrongdaiwen = Column(Integer)<br>    xiabuwen = Column(Integer)<br>    lengfengya = Column(Float)<br>    refengya = Column(Float)<br>    ludingya = Column(Float)<br>    clienttoken = Column(String(<span class="hljs-number">8</span>))<br>    mqtimestamp= Column(Integer)<br>    dttime = Column(DateTime)<br>    abnormalities = relationship(<span class="hljs-string">&quot;Abnormals&quot;</span>, back_populates=<span class="hljs-string">&quot;device_back&quot;</span>)   <span class="hljs-comment"># 一对多</span><br></code></pre></td></tr></table></figure><p>工单表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Abnormals</span>(<span class="hljs-title class_ inherited__">Base</span>):<br>    __tablename__ = <span class="hljs-string">&quot;abnormals&quot;</span>  <span class="hljs-comment"># 异常-维修工单表</span><br><br>    <span class="hljs-built_in">id</span> = Column(Integer, primary_key=<span class="hljs-literal">True</span>, index=<span class="hljs-literal">True</span>)<br>    device_id = Column(Integer, ForeignKey(<span class="hljs-string">&quot;device.id&quot;</span>))<br>    device_back = relationship(<span class="hljs-string">&quot;Devices&quot;</span>, back_populates=<span class="hljs-string">&quot;abnormalities&quot;</span>)<br><br>    state = Column(String(<span class="hljs-number">8</span>))   <span class="hljs-comment"># 状态</span><br>    time = Column(DateTime)     <span class="hljs-comment"># 时间</span><br>    msg = Column(String(<span class="hljs-number">255</span>))      <span class="hljs-comment"># 异常内容</span><br>    charge = Column(String(<span class="hljs-number">16</span>))  <span class="hljs-comment"># 主管</span><br>    worker = Column(String(<span class="hljs-number">16</span>))   <span class="hljs-comment"># 工作人员</span><br>    repair_time = Column(DateTime, default=<span class="hljs-literal">None</span>)  <span class="hljs-comment"># 维修时间</span><br></code></pre></td></tr></table></figure><h2 id="项目功能"><a href="#项目功能" class="headerlink" title="项目功能"></a>项目功能</h2><h3 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h3><p>使用mqtt传输协议获取实时数据。</p><p>存储方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_device</span>(<span class="hljs-params">db: Session, device: schemas.Devices</span>):<br>    db_device = models.Devices(<br>        code=device.code,<br>        ranshaodaiwen=device.ranshaodaiwen,<br>        shangbuwen=device.shangbuwen,<br>        rongrongdaiwen=device.rongrongdaiwen,<br>        xiabuwen=device.xiabuwen,<br>        lengfengya=device.lengfengya,<br>        refengya=device.refengya,<br>        ludingya=device.ludingya,<br>        clienttoken=device.clienttoken,<br>        mqtimestamp=device.mqtimestamp,<br>        dttime=device.dttime<br>    )<br>    db.add(db_device)<br>    db.commit()<br>    db.refresh(db_device)<br>    <span class="hljs-keyword">return</span> db_device<br></code></pre></td></tr></table></figure><h3 id="创建工单"><a href="#创建工单" class="headerlink" title="创建工单"></a>创建工单</h3><p><strong>存储数据时对数据进行检查，异常时应该建立对应的工单</strong>，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建异常</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_abnormal</span>(<span class="hljs-params">db: Session, device: schemas.Devices, abnormal: schemas.Abnormals</span>):<br>    db_abnormal = models.Abnormals(<br>        device_id=device.<span class="hljs-built_in">id</span>,<br>        state=abnormal.state,<br>        time=device.dttime,<br>        msg=abnormal.msg,<br>        charge=abnormal.charge,<br>        worker=abnormal.worker,<br>        repair_time=abnormal.repair_time<br>    )<br>    db.add(db_abnormal)<br>    db.commit()<br>    db.refresh(db_abnormal)<br>    <span class="hljs-keyword">return</span> db_abnormal<br></code></pre></td></tr></table></figure><h3 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h3><p>注册方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个用户</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_user</span>(<span class="hljs-params">db: Session, user: schemas.UserCreate</span>):<br>    <span class="hljs-comment"># 计算密码的哈希值</span><br>    hashed_password = get_password_hash(user.password)<br>    db_user = models.UserInDB(username=user.username,<br>                              hashed_password=hashed_password,<br>                              email=user.email,<br>                              full_name=user.full_name<br>                              )<br>    <span class="hljs-comment"># 第二步，将实例添加到会话</span><br>    db.add(db_user)<br>    <span class="hljs-comment"># 第三步，提交会话</span><br>    db.commit()<br>    <span class="hljs-comment"># 第四步，刷新实例，用于获取数据或者生成数据库中的ID</span><br>    db.refresh(db_user)<br>    <span class="hljs-keyword">return</span> db_user<br></code></pre></td></tr></table></figure><blockquote><p>密码加密方法放在<code>serices.py</code>里面</p></blockquote><p>fastapi接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/user/create/&quot;</span>, response_model=schemas.User</span>)  </span><span class="hljs-comment"># 创建用户</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_user</span>(<span class="hljs-params">user: schemas.UserCreate,</span><br><span class="hljs-params">                      db: Session = Depends(<span class="hljs-params">get_db</span>)</span>):<br>    dbuser = services.get_user(db, user.username)<br>    <span class="hljs-keyword">if</span> dbuser:  <span class="hljs-comment"># 判断用户名是否存在</span><br>        <span class="hljs-keyword">raise</span> HTTPException(<br>            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,<br>            detail=<span class="hljs-string">&quot;用户名已存在&quot;</span>,<br>            <span class="hljs-comment"># headers=&#123;&quot;WWW-Authenticate&quot;: &quot;Bearer&quot;&#125;,                          # 非Auth2，无需添加</span><br>        )<br>    <span class="hljs-keyword">return</span> services.create_user(db, user)  <span class="hljs-comment"># 在数据库中创建用户</span><br></code></pre></td></tr></table></figure><h3 id="用户登录接口"><a href="#用户登录接口" class="headerlink" title="用户登录接口"></a>用户登录接口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 登录的请求接口</span><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/user-login&quot;</span>, response_model=schemas.Token</span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params"></span><br><span class="hljs-params">        form: OAuth2PasswordRequestForm = Depends(<span class="hljs-params"></span>),  <span class="hljs-comment"># 依赖项，登录表单</span></span><br><span class="hljs-params">        db: Session = Depends(<span class="hljs-params">get_db</span>),  <span class="hljs-comment"># 依赖项，数据库会话</span></span><br><span class="hljs-params"></span>):<br>    user = services.authenticate_user(db, form.username, form.password)  <span class="hljs-comment"># 验证用户有效性</span><br>    <span class="hljs-built_in">print</span>(user)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user:<br>        <span class="hljs-keyword">raise</span> HTTPException(<br>            status_code=status.HTTP_401_UNAUTHORIZED,<br>            detail=<span class="hljs-string">&quot;用户名或密码无效&quot;</span>,<br>            headers=&#123;<span class="hljs-string">&quot;WWW-Authenticate&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span>&#125;,<br>        )<br>    access_token = services.create_token(data=&#123;<span class="hljs-string">&quot;username&quot;</span>: user.username&#125;)  <span class="hljs-comment"># 发放令牌</span><br>    <span class="hljs-comment"># # 将访问令牌存储在 Cookie 中</span><br>    response = Response()<br>    response.set_cookie(key=<span class="hljs-string">&quot;access_token&quot;</span>, value=access_token, httponly=<span class="hljs-literal">True</span>, max_age=<span class="hljs-number">3600</span>)  <span class="hljs-comment"># 设置过期时间为 1 小时</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;access_token&quot;</span>: access_token, <span class="hljs-string">&quot;token_type&quot;</span>: <span class="hljs-string">&quot;bearer&quot;</span>&#125;  <span class="hljs-comment"># 返回令牌</span><br></code></pre></td></tr></table></figure><h4 id="登录状态依赖函数"><a href="#登录状态依赖函数" class="headerlink" title="登录状态依赖函数"></a>登录状态依赖函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ***写一个登录之后检查登录状态的依赖函数***</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_status</span>(<span class="hljs-params">token: <span class="hljs-built_in">str</span> = Depends(<span class="hljs-params">oauth2_scheme</span>), db: Session = Depends(<span class="hljs-params">get_db</span>)</span>):<br>    invalid_exception = HTTPException(<br>        status_code=status.HTTP_401_UNAUTHORIZED,<br>        detail=<span class="hljs-string">&quot;无效的用户凭据&quot;</span>,<br>        headers=&#123;<span class="hljs-string">&quot;WWW-Authenticate&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span>&#125;,<br>    )<br>    expired_exception = HTTPException(<br>        status_code=status.HTTP_401_UNAUTHORIZED,<br>        detail=<span class="hljs-string">&quot;登录状态已过期&quot;</span>,<br>        headers=&#123;<span class="hljs-string">&quot;WWW-Authenticate&quot;</span>: <span class="hljs-string">&quot;Bearer&quot;</span>&#125;,<br>    )<br>    <span class="hljs-keyword">try</span>:<br>        username: <span class="hljs-built_in">str</span> = services.extract_token(token)[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        exp = services.extract_token(token)[<span class="hljs-string">&#x27;exp&#x27;</span>]<br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">raise</span> invalid_exception<br><br>        <span class="hljs-keyword">if</span> exp <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            校验token是否过期</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>            beijing_timezone = pytz.timezone(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>)<br>            exp_datetime = datetime.fromtimestamp(<span class="hljs-built_in">float</span>(exp), beijing_timezone)<br>            current_time = datetime.now(beijing_timezone)<br>            <span class="hljs-keyword">if</span> exp_datetime &lt; current_time:<br>                <span class="hljs-keyword">raise</span> expired_exception<br><br>    <span class="hljs-keyword">except</span> JWTError:<br>        <span class="hljs-keyword">raise</span> invalid_exception<br><br>    user = services.get_user(db, username=username)<br>    <span class="hljs-keyword">if</span> user <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> invalid_exception<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> user<br></code></pre></td></tr></table></figure><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><p>数据查询可以孪生可视化的各种功能，以下是查询工单的一个例子，就不一一例举了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_abnormals</span>(<span class="hljs-params">db: Session, skip: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span>, limit: <span class="hljs-built_in">int</span> = <span class="hljs-number">100</span></span>):<br>    <span class="hljs-keyword">return</span> db.query(models.Abnormals).offset(skip).limit(limit).<span class="hljs-built_in">all</span>()<br></code></pre></td></tr></table></figure><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端使用了element ui vue[^element ui]框架，弹窗使用了国外的一个弹窗组件，统计图使用了Apache Echarts[^Apache]</p><h3 id="下面是前端几个主要的js代码，更多请下载项目研究"><a href="#下面是前端几个主要的js代码，更多请下载项目研究" class="headerlink" title="下面是前端几个主要的js代码，更多请下载项目研究"></a>下面是前端几个主要的js代码，更多请下载项目研究</h3><p>登录js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;loginForm&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>             event.<span class="hljs-title function_">preventDefault</span>();<br><br>             <span class="hljs-keyword">var</span> username = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;username&#x27;</span>).<span class="hljs-property">value</span>;<br>             <span class="hljs-keyword">var</span> password = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;password&#x27;</span>).<span class="hljs-property">value</span>;<br><br>             <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/user-login&#x27;</span>, &#123;<br>                     <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>                     <span class="hljs-attr">headers</span>: &#123;<br>                         <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>                     &#125;,<br>                     <span class="hljs-attr">body</span>: <span class="hljs-string">`username=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(username)&#125;</span>&amp;password=<span class="hljs-subst">$&#123;<span class="hljs-built_in">encodeURIComponent</span>(password)&#125;</span>`</span><br>                 &#125;)<br>                 .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>                     <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br>                         <span class="hljs-keyword">if</span> (response.<span class="hljs-property">status</span> === <span class="hljs-number">401</span>) &#123;<br>                             <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>                                 <span class="hljs-title function_">loginno</span>(data.<span class="hljs-property">detail</span>);<br>                                 <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Unauthorized&#x27;</span>);<br>                             &#125;);<br>                         &#125; <span class="hljs-keyword">else</span> &#123;<br>                             <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Network response was not ok&#x27;</span>);<br>                         &#125;<br>                     &#125;<br>                     <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>();<br>                 &#125;)<br>                 .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>                     <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">`access_token=<span class="hljs-subst">$&#123;data.access_token&#125;</span>; max-age=3600; path=/`</span>;<br>                     <span class="hljs-title function_">loginok</span>();<br>                 &#125;)<br>                 .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>                     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error);<br>                 &#125;);<br>         &#125;);<br><br>         <span class="hljs-keyword">function</span> <span class="hljs-title function_">loginok</span>(<span class="hljs-params"></span>) &#123;<br>             <span class="hljs-keyword">let</span> timerInterval;<br>             <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123;<br>                 <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;登录成功!&quot;</span>,<br>                 <span class="hljs-attr">timer</span>: <span class="hljs-number">1000</span>,<br>                 <span class="hljs-attr">timerProgressBar</span>: <span class="hljs-literal">true</span>,<br>                 <span class="hljs-attr">didOpen</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                     <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">showLoading</span>();<br>                     <span class="hljs-keyword">const</span> timer = <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">getPopup</span>().<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;b&quot;</span>);<br>                     timerInterval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                         timer.<span class="hljs-property">textContent</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;Swal.getTimerLeft()&#125;</span>`</span>;<br>                     &#125;, <span class="hljs-number">100</span>);<br>                 &#125;,<br>                 <span class="hljs-attr">willClose</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                     <span class="hljs-built_in">clearInterval</span>(timerInterval);<br>                 &#125;<br>             &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>                 <span class="hljs-comment">/* Read more about handling dismissals below */</span><br>                 <span class="hljs-keyword">if</span> (result.<span class="hljs-property">dismiss</span> === <span class="hljs-title class_">Swal</span>.<span class="hljs-property">DismissReason</span>.<span class="hljs-property">timer</span>) &#123;<br>                     <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;/work&#x27;</span>;<br>                 &#125;<br>             &#125;);<br>         &#125;<br><br>         <span class="hljs-keyword">function</span> <span class="hljs-title function_">loginno</span>(<span class="hljs-params">message</span>) &#123;<br>             <span class="hljs-keyword">let</span> timerInterval;<br>             <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">fire</span>(&#123;<br>                 <span class="hljs-attr">title</span>: message,<br>                 <span class="hljs-attr">timer</span>: <span class="hljs-number">1000</span>,<br>                 <span class="hljs-attr">timerProgressBar</span>: <span class="hljs-literal">false</span>,<br>                 <span class="hljs-attr">showConfirmButton</span>: <span class="hljs-literal">false</span>,<br>                 <span class="hljs-attr">didOpen</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                     <span class="hljs-keyword">const</span> timer = <span class="hljs-title class_">Swal</span>.<span class="hljs-title function_">getPopup</span>().<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;b&quot;</span>);<br>                     timerInterval = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                         timer.<span class="hljs-property">textContent</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;Swal.getTimerLeft()&#125;</span>`</span>;<br>                     &#125;, <span class="hljs-number">100</span>);<br>                 &#125;,<br>                 <span class="hljs-attr">willClose</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                     <span class="hljs-built_in">clearInterval</span>(timerInterval);<br>                 &#125;<br>             &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>                 <span class="hljs-comment">/* Read more about handling dismissals below */</span><br>                 <span class="hljs-keyword">if</span> (result.<span class="hljs-property">dismiss</span> === <span class="hljs-title class_">Swal</span>.<span class="hljs-property">DismissReason</span>.<span class="hljs-property">timer</span>) &#123;<br>                 &#125;<br>             &#125;);<br>            <br></code></pre></td></tr></table></figure><p>检查登录状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 检查是否存在 cookie</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkCookie</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> cookieValue = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(?:(?:^|.*;\s*)access_token\s*\=\s*([^;]*).*$)|^.*$/</span>, <span class="hljs-string">&quot;$1&quot;</span>);<br><br>    <span class="hljs-comment">// 如果存在 cookie</span><br>    <span class="hljs-keyword">if</span> (cookieValue) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">checkToken</span>(cookieValue).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">isValid</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (isValid) &#123;<br>                    <span class="hljs-comment">// 验证通过，显示欢迎信息</span><br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;验证通过，显示欢迎信息&#x27;</span>);<br>                    <span class="hljs-title function_">redirectToWorkPage</span>();<br>                    <span class="hljs-comment">// 在这里添加你的逻辑，例如显示欢迎信息</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 验证失败，跳转至登录页面</span><br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;验证失败&#x27;</span>);<br>                &#125;<br>            &#125;);<br>        &#125;, <span class="hljs-number">2000</span>); <span class="hljs-comment">// 模拟向服务器验证需要的时间</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果不存在 cookie，跳转至登录页面</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 模拟向服务器验证 cookie 的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkToken</span>(<span class="hljs-params">token</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/verify_cookie&#x27;</span>, &#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">headers</span>: &#123;<br>            <span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;token&#125;</span>`</span><br>        &#125;<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;status is not ok&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 验证通过</span><br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;There has been a problem with your fetch operation:&#x27;</span>, error);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 验证失败</span><br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>处理工单js代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Main</span> = &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">tableData</span>: [],<br>      <span class="hljs-attr">loading</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">tableRowClassName</span>(<span class="hljs-params">&#123;row, rowIndex&#125;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (row.<span class="hljs-property">state</span>=== <span class="hljs-string">&quot;异常&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;warning-row&#x27;</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (row.<span class="hljs-property">state</span> === <span class="hljs-string">&quot;已完成&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;success-row&#x27;</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;,<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">loadData</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> abnormals = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetchAbnormals</span>();<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">tableData</span> = abnormals;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">loading</span> = <span class="hljs-literal">false</span>;<br>    &#125;,<br><br>&lt;!--    <span class="hljs-title function_">handleCheck</span>(<span class="hljs-params">index, row</span>) &#123;--&gt;<br>&lt;!--      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">confirm</span>(<span class="hljs-string">`确定要修改 <span class="hljs-subst">$&#123;row.name&#125;</span> 的地址吗？`</span>)) &#123;--&gt;<br>&lt;!--        <span class="hljs-variable language_">this</span>.$set(<span class="hljs-variable language_">this</span>.<span class="hljs-property">tableData</span>, index, &#123; ...row, <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;步行街&#x27;</span> &#125;);--&gt;<br>&lt;!--        <span class="hljs-comment">// 执行编辑操作，这里可以添加异步操作--&gt;</span><br>&lt;!--      &#125;--&gt;<br>&lt;!--    &#125;,--&gt;<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">handleEdit</span>(<span class="hljs-params">index, row</span>) &#123;<br>      <span class="hljs-keyword">var</span> upData = &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: row.<span class="hljs-property">id</span>,<br>        <span class="hljs-string">&quot;device_id&quot;</span>: row.<span class="hljs-property">device_id</span>,<br>        <span class="hljs-string">&quot;state&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;time&quot;</span>: row.<span class="hljs-property">time</span>,<br>        <span class="hljs-string">&quot;msg&quot;</span>: row.<span class="hljs-property">msg</span>,<br>        <span class="hljs-string">&quot;charge&quot;</span>: row.<span class="hljs-property">charge</span>,<br>        <span class="hljs-string">&quot;worker&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-string">&quot;repair_time&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>      &#125;;<br><br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">editPop</span>(upData);<br>        <span class="hljs-keyword">if</span>(result)&#123;<br>          <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">loadData</span>();<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;编辑操作失败:&#x27;</span>, error);<br>      &#125;<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">loadData</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Ctor</span> = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(<span class="hljs-title class_">Main</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Ctor</span>().$mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchAbnormals</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> url = <span class="hljs-string">`./abnormals/`</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(url, &#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">headers</span>: &#123;<br>          <span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">`Bearer <span class="hljs-subst">$&#123;<span class="hljs-variable language_">document</span>.cookie.replace(/(?:(?:^|.*;\s*)access_token\s*\=\s*([^;]*).*$)|^.*$/, <span class="hljs-string">&quot;$1&quot;</span>)&#125;</span>`</span><br>        &#125;<br>      &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`HTTP error! status: <span class="hljs-subst">$&#123;response.status&#125;</span>`</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>();<br>      &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error fetching abnormals:&#x27;</span>, error);<br>        <span class="hljs-keyword">return</span> [];<br>      &#125;);<br>      &#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是数据采集与可视化监控工单处理系统——炼铁高炉项目的主要内容，还有一些没有写出来的主要是因为重复性较高的，写出来没有什么意义。如果有需要的话，可以去我的github上点个小星星下载到本地运行，谢谢。</p><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>最后，非常感谢您的看到最后！</p><p>仓库地址：<a href="https://github.com/wechatid/WorkOdrderSystem">wechatid&#x2F;WorkOdrderSystem: 数据可视化与工单处理系统-炼铁高炉 (github.com)</a></p><p>[^所需库]: <a href="https://github.com/wechatid/WorkOdrderSystem/blob/main/requirements.txt">WorkOdrderSystem&#x2F;requirements.txt at main · wechatid&#x2F;WorkOdrderSystem (github.com)</a><br>[^Apache]: <a href="https://echarts.apache.org/zh/index.html">Apache ECharts</a><br>[^element ui]: <a href="https://element.eleme.cn/#/zh-CN/component/installation">组件 | Element</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>html</category>
      
      <category>sql</category>
      
      <category>mqtt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>html</tag>
      
      <tag>sql</tag>
      
      <tag>mqtt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python连接数据库时“No module named &#39;MySQLdb&#39;”错误</title>
    <link href="/2024/06/05/python-mysql-MysqldbErro/"/>
    <url>/2024/06/05/python-mysql-MysqldbErro/</url>
    
    <content type="html"><![CDATA[<p>运行之后抛出错误：<br><span style="color: red;"> return <strong>import</strong>(“MySQLdb”)ModuleNotFoundError: No module named ‘MySQLdb’</span></p><p>解决方法：</p><ol><li><strong>安装MySQLdb模块：</strong> 如果你的Python环境中没有安装MySQLdb模块，你可以通过运行以下命令来安装：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install mysqlclient<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>安装其他MySQL驱动程序：</strong> 除了MySQLdb外，还有其他一些可用于连接MySQL数据库的Python驱动程序，例如PyMySQL。你可以尝试安装PyMySQL并使用它来连接数据库：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pymysql<br></code></pre></td></tr></table></figure><p>然后在代码中将<code>mysql://</code>改为<code>mysql+pymysql://</code>。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抖音解析无水印Python</title>
    <link href="/2024/04/07/Titok-Download/"/>
    <url>/2024/04/07/Titok-Download/</url>
    
    <content type="html"><![CDATA[<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>打开分享的链接，按<kbd>F12</kbd>进入开发者选项、找到了一个接口，该接口返回了该视频的大部分信息，包括封面，音乐，有水印视频的地址以及无水印的地址。<br>通过对比发现，只有<code>aweme id</code>,<code>webid</code>,<code>msToken</code>,<code>a_bogus</code>改变，其他的值写死即可。</p><p>再通过修改某些具体值，发现<code>msToken</code>,<code>a_bogus</code>写死即可（修改之后仍然能获取）</p><p>任务需求表</p><table><thead><tr><th>步骤</th><th>变量</th><th></th></tr></thead><tbody><tr><td>一</td><td>aweme_id</td><td>视频ID</td></tr><tr><td>二</td><td>webid</td><td>通过js生成，每台电脑都不一样（一般不会变）</td></tr></tbody></table><h1 id="获取视频ID"><a href="#获取视频ID" class="headerlink" title="获取视频ID"></a>获取视频ID</h1><p>抖音分享获取的链接会重定向到一个新的包含了<code>ID</code>的地址，所以要通过短链接获取视频ID，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_id</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.head(self.url, allow_redirects=<span class="hljs-literal">True</span>)<br>        redirected_url = response.url<br>        <span class="hljs-keyword">try</span>:<br>            matches = re.findall(self.pattern, redirected_url)<br>            <span class="hljs-keyword">if</span> matches:<br>                aweme_id = matches[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">else</span>:<br>                aweme_id = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">except</span> re.error <span class="hljs-keyword">as</span> id_error:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error:&quot;</span>, id_error)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> aweme_id<br>    <span class="hljs-keyword">except</span> requests.RequestException <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error:&quot;</span>, e)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><h1 id="获取webid（无需）"><a href="#获取webid（无需）" class="headerlink" title="获取webid（无需）"></a>获取webid（无需）</h1><p>在全局搜索webid的值，可以找到其存在某些js文件当中，可以直接截取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_webid</span>(<span class="hljs-params">self</span>):<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;cookie&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span><br>                      <span class="hljs-string">&#x27;Chrome/123.0.0.0 Safari/537.36&#x27;</span>,<br>    &#125;<br>    response = requests.get(self.webid_url, headers=headers)<br>    web_id = response.json()[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;frontier_params&#x27;</span>][<span class="hljs-string">&#x27;frontier_device&#x27;</span>]<br>    <span class="hljs-keyword">return</span> web_id<br></code></pre></td></tr></table></figure><p>cookie太长了，可以去浏览器复制进去。</p><blockquote><p>cookie不能随便改，但是不知道有没有时间限制。</p></blockquote><h1 id="获取视频信息接口"><a href="#获取视频信息接口" class="headerlink" title="获取视频信息接口"></a>获取视频信息接口</h1><p>好像只需要知道<code>aweme_id</code>就可以了，我把其他所有都删除了，一样是可以获取到信息的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_info</span>(<span class="hljs-params">self, aweme_id</span>):<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;cookie&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;referer&#x27;</span>: <span class="hljs-string">&#x27;https://www.douyin.com/video/7344169821317106971&#x27;</span>,<br>        <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36&#x27;</span>,<br>    &#125;<br>    params = (<br>        (<span class="hljs-string">&#x27;aweme_id&#x27;</span>, aweme_id)<br>    )<br>    response = requests.get(<span class="hljs-string">&#x27;https://www.douyin.com/aweme/v1/web/aweme/detail/&#x27;</span>, headers=headers, params=params)<br>    mp4_info = response.json()<br>    <span class="hljs-keyword">return</span> mp4_info<br></code></pre></td></tr></table></figure><h1 id="接口信息分析"><a href="#接口信息分析" class="headerlink" title="接口信息分析"></a>接口信息分析</h1><table><thead><tr><th>名称</th><th>路径</th></tr></thead><tbody><tr><td>作者头像</td><td><code>[&quot;aweme_detail&quot;][&quot;author&quot;][&quot;avatar_thumb&quot;][&quot;url_list&quot;]</code></td></tr><tr><td>作者名称</td><td><code>[&quot;nickname&quot;]</code></td></tr><tr><td>作者个签</td><td><code>[&quot;signature&quot;]</code></td></tr><tr><td>抖音号</td><td><code>[&quot;unique_id&quot;]</code></td></tr><tr><td>年龄（不真实）</td><td><code>[&quot;user_age&quot;]</code></td></tr><tr><td>作品文案</td><td><code>[&quot;caption&quot;]</code></td></tr><tr><td>音乐封面</td><td><code>[&quot;music&quot;][&quot;cover_hd&quot;][ &quot;url_list&quot;]</code></td></tr><tr><td>音乐名字</td><td><code>[&quot;music&quot;][&quot;song&quot;][&quot;title&quot;]</code></td></tr><tr><td>音乐作者</td><td><code>[&quot;music&quot;][&quot;author&quot;]</code></td></tr><tr><td>音乐下载</td><td><code>[&quot;music&quot;][&quot;play_url&quot;][ &quot;url_list&quot;]</code></td></tr><tr><td>视频下载([0]为最高画质)</td><td><code>[&quot;video&quot;][ &quot;bit_rate&quot;][0][&quot;url_list&quot;]</code></td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python+Js逆向获取百度翻译接口</title>
    <link href="/2024/03/23/BaiduFanyi-jsPython/"/>
    <url>/2024/03/23/BaiduFanyi-jsPython/</url>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li><p>快速生成python requests请求的工具：<a href="https://curlconverter.com/">Convert curl commands to code (curlconverter.com)</a></p><p><img src="/" alt="复制curl"></p></li><li><p>百度翻译：<a href="https://fanyi.baidu.com/">百度翻译-200种语言互译、沟通全世界！ (baidu.com)</a></p></li></ul><p>通过一些简单的逆向爬虫，逐渐接触JS。</p><p>从入门到入狱！</p><h1 id="请求抓包"><a href="#请求抓包" class="headerlink" title="请求抓包"></a>请求抓包</h1><ol><li><p>打开百度翻译，按<kbd>F12</kbd>进入开发者选项，选择“网络”。在百度翻译输入框内输入“你好”,回车进行翻译。</p></li><li><p>通过查找，“v2transapi?from&#x3D;zh&amp;to&#x3D;en”这条请求包含了原文和翻译后的英文。这就是这次要找的接口了。</p></li><li><p>点击<kbd>负载</kbd>查看该请求所带的数据。然后重新换一个翻译词对比两次请求什么是变的什么是不变的。</p><div style="display:flex;">    <img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/jsfy1.png" style="width:50%;"/>    <img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/jsfy2.png" style="width:50%;"/></div></li></ol><p>​变的参数只有<code>query</code>,<code>sign</code>,<code>ts</code>。query携带的是翻译原文，sign是一个变化的值，ts初步判断是一个时间戳。</p><h1 id="逆向抓取sign生成的地方"><a href="#逆向抓取sign生成的地方" class="headerlink" title="逆向抓取sign生成的地方"></a>逆向抓取sign生成的地方</h1><ol><li><p>按住<kbd>ctrl</kbd><kbd>shift</kbd><kbd>f</kbd>进行全局搜索<strong>sign</strong>，寻找sign生成所在的js脚本。</p><blockquote><p>发现可疑的点进去，打个断点，再刷新一下看看是否在这个地方挺住或者生成sign了。</p></blockquote></li><li><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/jsfyi3.png" alt="image-20240323111451164"></p><p>找到这个地方，打个断点,果然在这里停住了。把鼠标放到<code>b(e)</code>上面去，点进去这个函数。</p></li><li><p>进去到这函数，打个断点，一步一步运行，查看是怎么生成<strong>sign</strong>的。</p></li><li><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/jsfyi4.png" alt="image-20240323112153180"></p><p>看到这个函数传进来的就是原文了。</p></li><li><p>在pycharm里新建一个<code>.js</code>的文件把一整块函数复制进去，对函数名进行修改。在终端里运行，提示<code>ReferenceError: r is not defined</code></p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/jsfyi6.png" alt="image-20240323115259168"></p></li><li><p>多次刷新发现这个r是一个固定值“320305.131321201”，来源是“window[d]”,而d又是等于gtk，直接搜索全局，发现gtk来源于首页index.html，直接用python的requests获取就行了。</p></li><li><p>知道js中<code>r</code>的来源了。完善js代码就行了。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/jsfyi7.png" alt="image-20240323120655214"></p><p>还需要把GetDign里的<code>window[d]</code>改成<code>gtk</code></p></li><li><p>运行之后抛出错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">                b = <span class="hljs-title function_">n</span>(b += g[x], w);<br>                ^<br><br><span class="hljs-title class_">ReferenceError</span>: n is not defined<br><br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/jsfyi8.png" alt="image-20240323121813846"></p><p>没有函数<code>n</code>，回到js页面，找到n所在的位置，直接<kbd>copy</kbd>进去就成功生成sign 了。保存js文件</p></li><li><p>验证</p> <div style="display:flex;"> <img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/jsfy11.png" style="width:50%;"/> <img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/jsfyi12.png" style="width:50%;"/> </div> </li><li><p>token虽然也是固定值，但也说不定以后不会变，直接搜<code>token</code>或者token的值，就能找到token同样也来自index.html直接获取就行了。</p></li></ol><h1 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> execjs<br><span class="hljs-keyword">import</span> requests<br><br><br>cookies = &#123;<br>    <span class="hljs-string">&#x27;BAIDUID&#x27;</span>: <span class="hljs-string">&#x27;F939638C0836A775A551394EA49AC126:SL=0:NR=10:FG=1&#x27;</span>,<br>    <span class="hljs-string">&#x27;ZFY&#x27;</span>: <span class="hljs-string">&#x27;vJGxZYlEfVpvkXfXJnQ5YjtydbbSk:B3sBx6xbTr2dqg:C&#x27;</span>,<br>    <span class="hljs-string">&#x27;BAIDUID_BFESS&#x27;</span>: <span class="hljs-string">&#x27;F939638C0836A775A551394EA49AC126:SL=0:NR=10:FG=1&#x27;</span>,<br>    <span class="hljs-string">&#x27;PSTM&#x27;</span>: <span class="hljs-string">&#x27;1700663540&#x27;</span>,<br>    <span class="hljs-string">&#x27;BIDUPSID&#x27;</span>: <span class="hljs-string">&#x27;F939638C0836A775F2431FDE836896A0&#x27;</span>,<br>    <span class="hljs-string">&#x27;H_PS_PSSID&#x27;</span>: <span class="hljs-string">&#x27;39676_39713_39780_39790_39703_39796_39684_39662_39679_39817_39783_39841&#x27;</span>,<br>    <span class="hljs-string">&#x27;__bid_n&#x27;</span>: <span class="hljs-string">&#x27;18a98c645269552d29cf9b&#x27;</span>,<br>    <span class="hljs-string">&#x27;BDUSS&#x27;</span>: <span class="hljs-string">&#x27;3drSTQ4V3VCU2xGaDJrakhHZU5MWXVIbHRtTWtVY3pRTmhueFNIR2piU2VnZmxsRVFBQUFBJCQAAAAAAAAAAAEAAAA9aUaiYmFpZHVfdWlkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ700WWe9NFla&#x27;</span>,<br>    <span class="hljs-string">&#x27;BDUSS_BFESS&#x27;</span>: <span class="hljs-string">&#x27;3drSTQ4V3VCU2xGaDJrakhHZU5MWXVIbHRtTWtVY3pRTmhueFNIR2piU2VnZmxsRVFBQUFBJCQAAAAAAAAAAAEAAAA9aUaiYmFpZHVfdWlkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ700WWe9NFla&#x27;</span>,<br>    <span class="hljs-string">&#x27;smallFlowVersion&#x27;</span>: <span class="hljs-string">&#x27;old&#x27;</span>,<br>    <span class="hljs-string">&#x27;RT&#x27;</span>: <span class="hljs-string">&#x27;&quot;z=1&amp;dm=baidu.com&amp;si=42va2gpjvkg&amp;ss=lu2lybge&amp;sl=3&amp;tt=2pp&amp;bcn=https%3A%2F%2Ffclog.baidu.com%2Flog%2Fweirwood%3Ftype%3Dperf&amp;ld=2nvg&amp;ul=2onn&amp;hd=2pxh&quot;&#x27;</span>,<br>    <span class="hljs-string">&#x27;Hm_lvt_64ecd82404c51e03dc91cb9e8c025574&#x27;</span>: <span class="hljs-string">&#x27;1711108849&#x27;</span>,<br>    <span class="hljs-string">&#x27;APPGUIDE_10_7_2&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-string">&#x27;REALTIME_TRANS_SWITCH&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-string">&#x27;FANYI_WORD_SWITCH&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-string">&#x27;HISTORY_SWITCH&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-string">&#x27;SOUND_SPD_SWITCH&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-string">&#x27;SOUND_PREFER_SWITCH&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-string">&#x27;Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574&#x27;</span>: <span class="hljs-string">&#x27;1711114617&#x27;</span>,<br>    <span class="hljs-string">&#x27;ab_sr&#x27;</span>: <span class="hljs-string">&#x27;1.0.1_ZGE0NjI0MGE5YWQxMjhiZWY4MGE0NDA4Yzk3M2M5MDAwZTc0N2U1ZmU4ZDAzNGJjNDVkMWVhYmExOGJkMDM1OTkzM2I5ZDEzMjQyMWU1NjY3MGFjNjQwYWI2ZjU2Mzc0NDZjYWNkZjhlNTI4NGYzYjYxMmQ0ZGRlMmI0ODEzMDVkYjQ2ZWU4NzZiYWE1ZDNhNGI3NzRlOTIwZGVhNTYyMjU4ZGQzNmVmZDZlOWEyMWI4MmIxMTkwZDkyNWU4ZmIw&#x27;</span>,<br>&#125;<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;*/*&#x27;</span>,<br>    <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&#x27;</span>,<br>    <span class="hljs-string">&#x27;Acs-Token&#x27;</span>: <span class="hljs-string">&#x27;1711108805423_1711114643856_U/P1qQ7qhwJbUjFlDdaZOJII7xNDaZbtFXRzes9bvQe0EJVjAHtnb8hgRVtGuPrBvfR0KN+jQYxYG9gcYDYiLTaI82AZRJErUaZiVjnPlgXOP7SSpzVTb6/Jr03V0IUEq2svRifdTPhVsmfYSrQCl7yOV6OLJQHB1O6bjVLcHLoY5FVx5+mpiPuFrVMBEOGrA1lsZ0vgbXsMKn8eGjF040xYWQWxGv2jCH4/gJDUghkq1lGa5aQSdDgJo4oYQWOkMrP99HhUyfp6XO2Xl87tBXS0L1d8CuUpe/yX4cgq1oP2olu+rz24UDYNBTnTFnMc14LxagzSgfbJvlVrjSs9VCg/8XvVR7uDf8b5IOUaxaysOpZc+rR+rpBEeW5m0BuzTRhV41VSo8oNZtLyUt6cwuUKWn3NM+m4eilhnH/Qc6qqPp1yd2aRsMOM80EgneaAjoK7SGWxk3QaqkSpdk8o4WmZG4c+UNmD/49fS63TV9BRkGICDxN/nB5oUQ1RUwWl&#x27;</span>,<br>    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,<br>    <span class="hljs-comment"># &#x27;Cookie&#x27;: &#x27;BAIDUID=F939638C0836A775A551394EA49AC126:SL=0:NR=10:FG=1; ZFY=vJGxZYlEfVpvkXfXJnQ5YjtydbbSk:B3sBx6xbTr2dqg:C; BAIDUID_BFESS=F939638C0836A775A551394EA49AC126:SL=0:NR=10:FG=1; PSTM=1700663540; BIDUPSID=F939638C0836A775F2431FDE836896A0; H_PS_PSSID=39676_39713_39780_39790_39703_39796_39684_39662_39679_39817_39783_39841; __bid_n=18a98c645269552d29cf9b; BDUSS=3drSTQ4V3VCU2xGaDJrakhHZU5MWXVIbHRtTWtVY3pRTmhueFNIR2piU2VnZmxsRVFBQUFBJCQAAAAAAAAAAAEAAAA9aUaiYmFpZHVfdWlkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ700WWe9NFla; BDUSS_BFESS=3drSTQ4V3VCU2xGaDJrakhHZU5MWXVIbHRtTWtVY3pRTmhueFNIR2piU2VnZmxsRVFBQUFBJCQAAAAAAAAAAAEAAAA9aUaiYmFpZHVfdWlkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ700WWe9NFla; smallFlowVersion=old; RT=&quot;z=1&amp;dm=baidu.com&amp;si=42va2gpjvkg&amp;ss=lu2lybge&amp;sl=3&amp;tt=2pp&amp;bcn=https%3A%2F%2Ffclog.baidu.com%2Flog%2Fweirwood%3Ftype%3Dperf&amp;ld=2nvg&amp;ul=2onn&amp;hd=2pxh&quot;; Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1711108849; APPGUIDE_10_7_2=1; REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; HISTORY_SWITCH=1; SOUND_SPD_SWITCH=1; SOUND_PREFER_SWITCH=1; Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574=1711114617; ab_sr=1.0.1_ZGE0NjI0MGE5YWQxMjhiZWY4MGE0NDA4Yzk3M2M5MDAwZTc0N2U1ZmU4ZDAzNGJjNDVkMWVhYmExOGJkMDM1OTkzM2I5ZDEzMjQyMWU1NjY3MGFjNjQwYWI2ZjU2Mzc0NDZjYWNkZjhlNTI4NGYzYjYxMmQ0ZGRlMmI0ODEzMDVkYjQ2ZWU4NzZiYWE1ZDNhNGI3NzRlOTIwZGVhNTYyMjU4ZGQzNmVmZDZlOWEyMWI4MmIxMTkwZDkyNWU4ZmIw&#x27;,</span><br>    <span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;https://fanyi.baidu.com&#x27;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;https://fanyi.baidu.com/&#x27;</span>,<br>    <span class="hljs-string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="hljs-string">&#x27;empty&#x27;</span>,<br>    <span class="hljs-string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="hljs-string">&#x27;cors&#x27;</span>,<br>    <span class="hljs-string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="hljs-string">&#x27;same-origin&#x27;</span>,<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>,<br>    <span class="hljs-string">&#x27;sec-ch-ua&#x27;</span>: <span class="hljs-string">&#x27;&quot;Chromium&quot;;v=&quot;122&quot;, &quot;Not(A:Brand&quot;;v=&quot;24&quot;, &quot;Microsoft Edge&quot;;v=&quot;122&quot;&#x27;</span>,<br>    <span class="hljs-string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="hljs-string">&#x27;?0&#x27;</span>,<br>    <span class="hljs-string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="hljs-string">&#x27;&quot;Windows&quot;&#x27;</span>,<br>&#125;<br><br>params = &#123;<br>    <span class="hljs-string">&#x27;from&#x27;</span>: <span class="hljs-string">&#x27;zh&#x27;</span>,<br>    <span class="hljs-string">&#x27;to&#x27;</span>: <span class="hljs-string">&#x27;en&#x27;</span>,<br>&#125;<br><br>word = <span class="hljs-built_in">input</span>(<span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;请输入中文：&quot;</span>))<br>session_ = requests.session()<br><span class="hljs-comment"># 第一次请求首页，目的是生成cookie</span><br>res1 = session_.get(<span class="hljs-string">&#x27;https://fanyi.baidu.com/&#x27;</span>, headers=headers)<br><span class="hljs-comment"># 第二次请求首页，目的是获取token</span><br>res2 = session_.get(<span class="hljs-string">&#x27;https://fanyi.baidu.com/&#x27;</span>, headers=headers)<br>gtk = re.search(<span class="hljs-string">r&quot;gtk = \&quot;(.*?)\&quot;;&quot;</span>, res1.text).group(<span class="hljs-number">1</span>)<br>token = re.search(<span class="hljs-string">r&quot;token: &#x27;(.*?)&#x27;&quot;</span>, res2.text).group(<span class="hljs-number">1</span>)<br>ts = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(time.time()*<span class="hljs-number">1000</span>))<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sign.js&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    js = f.read()<br>    js_r = execjs.<span class="hljs-built_in">compile</span>(js)<br>    f.close()<br>sign = js_r.call(<span class="hljs-string">&quot;GetSign&quot;</span>, word, gtk)<br>data = &#123;<br>    <span class="hljs-string">&#x27;from&#x27;</span>: <span class="hljs-string">&#x27;zh&#x27;</span>,<br>    <span class="hljs-string">&#x27;to&#x27;</span>: <span class="hljs-string">&#x27;en&#x27;</span>,<br>    <span class="hljs-string">&#x27;query&#x27;</span>: word,<br>    <span class="hljs-string">&#x27;simple_means_flag&#x27;</span>: <span class="hljs-string">&#x27;3&#x27;</span>,<br>    <span class="hljs-string">&#x27;sign&#x27;</span>: sign,<br>    <span class="hljs-string">&#x27;token&#x27;</span>: token,<br>    <span class="hljs-string">&#x27;domain&#x27;</span>: <span class="hljs-string">&#x27;common&#x27;</span>,<br>    <span class="hljs-string">&#x27;ts&#x27;</span>: ts,<br>&#125;<br><br>response = session_.post(<span class="hljs-string">&#x27;https://fanyi.baidu.com/v2transapi&#x27;</span>, params=params, cookies=cookies, headers=headers, data=data)<br><span class="hljs-built_in">print</span>(response.json()[<span class="hljs-string">&#x27;trans_result&#x27;</span>][<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;dst&#x27;</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装SQL数据库和金蝶软件记录</title>
    <link href="/2024/03/06/Install-SQL-Kingdee/"/>
    <url>/2024/03/06/Install-SQL-Kingdee/</url>
    
    <content type="html"><![CDATA[<h1 id="安装SQL"><a href="#安装SQL" class="headerlink" title="安装SQL"></a>安装SQL</h1><ol><li><p>启动windows功能。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/SQL1.png" alt="image-20240306184352024"></p></li><li><p>Windows用户必须拥有全部管理权限，即管理员账户。</p></li><li><p>解压“SQL Server 2016.rar”压缩包。</p></li><li><p>以管理员身份运行安装程序。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/SQL2.png" alt="image-20240306185726233"></p></li><li><p>点击安装，选择“全新 SQL Server独立安装…”</p><blockquote><p>安装报错为：</p><p>行1 位置50时，则代表</p><p>与windows系统不兼容，</p><p>需要重新安装windows</p><p>系统。</p></blockquote></li><li><p>点击下一步。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/SQL3.png" alt="image-20240306190347845"></p></li><li><p>功能选择，需要勾选的功能。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/SQL4.png" alt="image-20240306190659055"></p><p>本次安装的2016版本中，没有4.管理工具，所以就不管它。</p></li><li><p>修改实例根目录，修改为<code>D:\SQL</code>。</p></li><li><p><a id="password">数据库引擎配置。</a></p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/SQL5png" alt="image-20240306193750111"></p></li><li><p>下一步，等待安装完成。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/SQL6.png" alt="image-20240306194621143"></p></li></ol><h1 id="金蝶k3-cloud安装"><a href="#金蝶k3-cloud安装" class="headerlink" title="金蝶k3&#x2F;cloud安装"></a>金蝶k3&#x2F;cloud安装</h1><ol><li><p>解压文件<code>修复版金蝶云V7.1安装包.zip</code>。</p></li><li><p>以管理员身份运行<code>SETUP.exe</code>程序。</p></li><li><p>功能选择</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee1.png" alt="image-20240306195841820"></p></li><li><p>环境检测。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee2.png" alt="image-20240306200509230"></p><p>可以自动修复，也可以在windows系统更新里自行安装。</p></li><li><p>安装完成。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee3.png" alt="image-20240306202446377"></p></li></ol><h2 id="金蝶的账套配置"><a href="#金蝶的账套配置" class="headerlink" title="金蝶的账套配置"></a>金蝶的账套配置</h2><ol><li><p>在目录<code>D:\Kingdee\odp_Net</code>下找到<code>install.bat</code>,以管理员身份运行。</p></li><li><p>重启IIS：在‘服务’中找到<code>IIS 管理服务</code>或者<code>IISADMIN</code>点击重新启动。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee4.png" alt="image-20240306204956096"></p></li><li><p>登录<code>http://localhost:8000</code>这个地址，创建管理中心数据库。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee5.png" alt="image-20240306210023369"></p><p>账号是”sa“</p><p>密码则是<a href="#password">数据库引擎配置</a>时设置的密码</p><p>创建完成之后重启IIS</p></li><li><p>点击完成之后，会跳转页面安装Slivelight。地址为<code>http://localhost:8000/Silverlight/mc.aspx</code></p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee6.png" alt="image-20240306211305649"></p><p>会下载一个<code>Silverlight_x64.exe</code>程序，运行它。</p></li><li><p>点击立即安装，安装成功后，回到浏览器刷新页面。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee7.png" alt="image-20240306211727581"></p><ul><li><p>安装成功之后，返回浏览器刷新页面。<strong>若仍然提示<code>&quot;要观看此内容，请安装&quot;</code>，</strong>这是因为silverlight仅支持IE浏览器，而IE浏览器已经停止更新了。</p></li><li><blockquote><p>Edge浏览器解决办法：点击右上角三个点-设置-默认浏览器</p><p>配置如下图</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee8.png" alt="image-20240306213940116"></p></blockquote></li></ul></li><li><p>成功打开登录页面后，输入<strong>金蝶云初始密码为888888</strong>，登录记得勾选200mb配额。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee112.png" alt="image-20240306214943429"></p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee9.png" alt="image-20240306214400011"></p></li><li><p>金蝶套账数据中心的创建</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee10.png" alt="image-20240306214658620"></p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee113.png" alt="image-20240306215959746"></p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/kingdee114.png" alt="image-20240306220127878"></p></li></ol><h2 id="license的导入"><a href="#license的导入" class="headerlink" title="license的导入"></a>license的导入</h2><p> 略</p>]]></content>
    
    
    <categories>
      
      <category>生产运作与管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生产运作与管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用python创建运动步数修改api</title>
    <link href="/2024/03/05/misep-for-FastApi/"/>
    <url>/2024/03/05/misep-for-FastApi/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>专业开设了FastApi这门课程，先通过这样的小程序简单熟悉一下。</p><p>基于前面的小米运动步数修改的python源码之上导入<a href="https://fastapi.tiangolo.com/zh/">FastAPI </a>和<a href="https://zhuanlan.zhihu.com/p/115237857">Uvicorn</a></p><p>创建一个修改步数的api。<br>通过”域名&#x2F;misep?user&#x3D;123456&amp;password&#x3D;123456&amp;sep&#x3D;10000”的形式就能修改步数。</p><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><ol><li><p>把<a href="https://wechatid.github.io/2024/02/15/XiaoMi-step/">运动步数修改-python - Imscad’s Blog (wechatid.github.io)</a>的python代码复制，粘贴到程序上。</p><ol><li><p>把源码中所有print语句都注释掉</p></li><li><p>修改main方法里的return语句,修改后如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.login():<br>        <span class="hljs-comment"># 登录失败时</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;100&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.get_token():<br>        <span class="hljs-comment"># token获取失败时</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;401&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.change_step():<br>        <span class="hljs-comment"># 步数修改失败时</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;404&quot;</span><br>    <span class="hljs-comment"># 修改成功时</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;200&quot;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>安装fastapi 和uvicorn</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple fastapi<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple uvicorn<br></code></pre></td></tr></table></figure></li><li><p>创建一个 FastAPI 实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">app = FastAPI()<br></code></pre></td></tr></table></figure></li><li><p>创建一个路由，定义 HTTP 方法和路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_misep</span>(<span class="hljs-params">user, password, sep</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    华米运动</span><br><span class="hljs-string">    user: 账号</span><br><span class="hljs-string">    password: 密码</span><br><span class="hljs-string">    sep: 步数</span><br><span class="hljs-string">    return: 返回json数据</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> user == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> password == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> sep == <span class="hljs-string">&#x27;&#x27;</span>:<br>        code = <span class="hljs-string">&quot;400&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        user = <span class="hljs-string">&#x27;+86&#x27;</span> + user<br>        code = XiaoMi(user, password, sep).main()<br>    response_msg = &#123;<br>        <span class="hljs-string">&quot;100&quot;</span>: <span class="hljs-string">&quot;请检查账号信息&quot;</span>,<br>        <span class="hljs-string">&quot;200&quot;</span>: <span class="hljs-string">&quot;提交成功！&quot;</span>,<br>        <span class="hljs-string">&quot;400&quot;</span>: <span class="hljs-string">&quot;参数错误！&quot;</span>,<br>        <span class="hljs-string">&quot;401&quot;</span>: <span class="hljs-string">&quot;提交失败！&quot;</span>,<br>        <span class="hljs-string">&quot;404&quot;</span>: <span class="hljs-string">&quot;提交失败！&quot;</span><br>    &#125;<br>    response = &#123;<br>        <span class="hljs-string">&quot;code&quot;</span>: code,<br>        <span class="hljs-string">&quot;msg&quot;</span>: response_msg[code],<br>        <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;user&quot;</span>: user,<br>            <span class="hljs-string">&quot;step&quot;</span>: sep<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure></li><li><p>运行应用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">import</span> uvicorn<br>    uvicorn.run(app, host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure></li></ol><h1 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h1><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/202403052226111.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>fastapi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>fastapi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运动步数修改-python</title>
    <link href="/2024/02/15/XiaoMi-step/"/>
    <url>/2024/02/15/XiaoMi-step/</url>
    
    <content type="html"><![CDATA[<h1 id="基于华米运动（小米运动）的步数修改-python源码"><a href="#基于华米运动（小米运动）的步数修改-python源码" class="headerlink" title="基于华米运动（小米运动）的步数修改_python源码"></a>基于华米运动（小米运动）的步数修改_python源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">XiaoMi</span>:<br><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Dalvik/2.1.0 (Linux; U; Android 5.1.1; SM-G9750 Build/LMY48Z)&#x27;</span><br>    &#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username: <span class="hljs-built_in">str</span>, password: <span class="hljs-built_in">str</span>, step: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        self.access_code = <span class="hljs-string">&#x27;&#x27;</span><br>        self.app_token = <span class="hljs-string">&#x27;&#x27;</span><br>        self.user_id = <span class="hljs-string">&#x27;&#x27;</span><br>        self.username = username<br>        self.password = password<br>        self.step = step<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        登录</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        url = <span class="hljs-string">f&#x27;https://api-user.huami.com/registrations/<span class="hljs-subst">&#123;self.username&#125;</span>/tokens&#x27;</span><br>        data = &#123;<br>            <span class="hljs-string">&#x27;phone_number&#x27;</span>: self.username,<br>            <span class="hljs-string">&#x27;password&#x27;</span>: self.password,<br>            <span class="hljs-string">&#x27;client_id&#x27;</span>: <span class="hljs-string">&#x27;HuaMi&#x27;</span>,<br>            <span class="hljs-string">&#x27;token&#x27;</span>: <span class="hljs-string">&#x27;access&#x27;</span>,<br>            <span class="hljs-string">&#x27;redirect_uri&#x27;</span>: <span class="hljs-string">&#x27;https://s3-us-west-2.amazonaws.com/hm-registration/successsignin.html&#x27;</span><br>        &#125;<br><br>        res = requests.post(url, data=data, headers=self.headers)<br>        <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-comment"># 重定向的Location</span><br>            redirect_location = res.history[<span class="hljs-number">0</span>].headers[<span class="hljs-string">&#x27;Location&#x27;</span>]<br>            <span class="hljs-comment"># 获取通行码</span><br>            find_access = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;access=(.*?)&amp;&#x27;</span>)<br>            access_code = find_access.findall(redirect_location)<br>            <span class="hljs-comment"># 无论账号密码是否对得上，响应状态码都是200，但如果账号密码对不上，是没有访问码的</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(access_code) != <span class="hljs-number">0</span>:<br>                self.access_code = access_code[<span class="hljs-number">0</span>]<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;登录失败，请检查账号密码&quot;</span>)<br>        <span class="hljs-comment"># print(res.json())</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_token</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        获取令牌</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;+86&#x27;</span> <span class="hljs-keyword">in</span> self.username:<br>            third_name = <span class="hljs-string">&#x27;huami_phone&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            third_name = <span class="hljs-string">&#x27;email&#x27;</span><br>        url = <span class="hljs-string">&#x27;https://account.huami.com/v2/client/login&#x27;</span><br>        data = &#123;<br>            <span class="hljs-string">&#x27;allow_registration=&#x27;</span>: <span class="hljs-string">&#x27;false&#x27;</span>,<br>            <span class="hljs-string">&#x27;app_name&#x27;</span>: <span class="hljs-string">&#x27;com.xiaomi.hm.health&#x27;</span>,<br>            <span class="hljs-string">&#x27;app_version&#x27;</span>: <span class="hljs-string">&#x27;6.3.5&#x27;</span>,<br>            <span class="hljs-string">&#x27;code&#x27;</span>: self.access_code,<br>            <span class="hljs-string">&#x27;country_code&#x27;</span>: <span class="hljs-string">&#x27;CN&#x27;</span>,<br>            <span class="hljs-string">&#x27;device_id&#x27;</span>: <span class="hljs-string">&#x27;2C8B4939-0CCD-4E94-8CBA-CB8EA6E613A1&#x27;</span>,<br>            <span class="hljs-string">&#x27;device_model&#x27;</span>: <span class="hljs-string">&#x27;phone&#x27;</span>,<br>            <span class="hljs-string">&#x27;dn&#x27;</span>: <span class="hljs-string">&#x27;api-user.huami.com%2Capi-mifit.huami.com%2Capp-analytics.huami.com&#x27;</span>,<br>            <span class="hljs-string">&#x27;grant_type&#x27;</span>: <span class="hljs-string">&#x27;access_token&#x27;</span>,<br>            <span class="hljs-string">&#x27;lang&#x27;</span>: <span class="hljs-string">&#x27;zh_CN&#x27;</span>,<br>            <span class="hljs-string">&#x27;os_version&#x27;</span>: <span class="hljs-string">&#x27;1.5.0&#x27;</span>,<br>            <span class="hljs-string">&#x27;source&#x27;</span>: <span class="hljs-string">&#x27;com.xiaomi.hm.health&#x27;</span>,<br>            <span class="hljs-string">&#x27;third_name&#x27;</span>: third_name,<br>        &#125;<br><br>        res = requests.post(url, headers=self.headers, data=data)<br>        <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">eval</span>(res.text)) != <span class="hljs-number">1</span>:<br>                token = <span class="hljs-built_in">eval</span>(res.text)[<span class="hljs-string">&#x27;token_info&#x27;</span>]<br>                self.user_id = token[<span class="hljs-string">&#x27;user_id&#x27;</span>]<br>                self.app_token = token[<span class="hljs-string">&#x27;app_token&#x27;</span>]<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-built_in">print</span>(res.json())<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">change_step</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        修改步骤</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        date = datetime.date.today()<br>        <span class="hljs-comment"># 表单数据中的data_json</span><br>        data_json = <span class="hljs-string">f&#x27;%5B%7B%22data_hr%22%3A%22%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F9L%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FVv%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F0v%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F9e%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F0n%5C%2Fa%5C%2F%5C%2F%5C%2FS%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F0b%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F1FK%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FR%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F9PTFFpaf9L%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FR%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F0j%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F9K%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FOv%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2Fzf%5C%2F%5C%2F%5C%2F86%5C%2Fzr%5C%2FOv88%5C%2Fzf%5C%2FPf%5C%2F%5C%2F%5C%2F0v%5C%2FS%5C%2F8%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FSf%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2Fz3%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F0r%5C%2FOv%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FS%5C%2F9L%5C%2Fzb%5C%2FSf9K%5C%2F0v%5C%2FRf9H%5C%2Fzj%5C%2FSf9K%5C%2F0%5C%2F%5C%2FN%5C%2F%5C%2F%5C%2F%5C%2F0D%5C%2FSf83%5C%2Fzr%5C%2FPf9M%5C%2F0v%5C%2FOv9e%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FS%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2Fzv%5C%2F%5C%2Fz7%5C%2FO%5C%2F83%5C%2Fzv%5C%2FN%5C%2F83%5C%2Fzr%5C%2FN%5C%2F86%5C%2Fz%5C%2F%5C%2FNv83%5C%2Fzn%5C%2FXv84%5C%2Fzr%5C%2FPP84%5C%2Fzj%5C%2FN%5C%2F9e%5C%2Fzr%5C%2FN%5C%2F89%5C%2F03%5C%2FP%5C%2F89%5C%2Fz3%5C%2FQ%5C%2F9N%5C%2F0v%5C%2FTv9C%5C%2F0H%5C%2FOf9D%5C%2Fzz%5C%2FOf88%5C%2Fz%5C%2F%5C%2FPP9A%5C%2Fzr%5C%2FN%5C%2F86%5C%2Fzz%5C%2FNv87%5C%2F0D%5C%2FOv84%5C%2F0v%5C%2FO%5C%2F84%5C%2Fzf%5C%2FMP83%5C%2FzH%5C%2FNv83%5C%2Fzf%5C%2FN%5C%2F84%5C%2Fzf%5C%2FOf82%5C%2Fzf%5C%2FOP83%5C%2Fzb%5C%2FMv81%5C%2FzX%5C%2FR%5C%2F9L%5C%2F0v%5C%2FO%5C%2F9I%5C%2F0T%5C%2FS%5C%2F9A%5C%2Fzn%5C%2FPf89%5C%2Fzn%5C%2FNf9K%5C%2F07%5C%2FN%5C%2F83%5C%2Fzn%5C%2FNv83%5C%2Fzv%5C%2FO%5C%2F9A%5C%2F0H%5C%2FOf8%5C%2F%5C%2Fzj%5C%2FPP83%5C%2Fzj%5C%2FS%5C%2F87%5C%2Fzj%5C%2FNv84%5C%2Fzf%5C%2FOf83%5C%2Fzf%5C%2FOf83%5C%2Fzb%5C%2FNv9L%5C%2Fzj%5C%2FNv82%5C%2Fzb%5C%2FN%5C%2F85%5C%2Fzf%5C%2FN%5C%2F9J%5C%2Fzf%5C%2FNv83%5C%2Fzj%5C%2FNv84%5C%2F0r%5C%2FSv83%5C%2Fzf%5C%2FMP%5C%2F%5C%2F%5C%2Fzb%5C%2FMv82%5C%2Fzb%5C%2FOf85%5C%2Fz7%5C%2FNv8%5C%2F%5C%2F0r%5C%2FS%5C%2F85%5C%2F0H%5C%2FQP9B%5C%2F0D%5C%2FNf89%5C%2Fzj%5C%2FOv83%5C%2Fzv%5C%2FNv8%5C%2F%5C%2F0f%5C%2FSv9O%5C%2F0ZeXv%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F1X%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F9B%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2FTP%5C%2F%5C%2F%5C%2F1b%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F0%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F9N%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2F%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%5C%2Fv7%2B%22%2C%22date%22%3A%22<span class="hljs-subst">&#123;date&#125;</span>%22%2C%22data%22%3A%5B%7B%22start%22%3A0%2C%22stop%22%3A1439%2C%22value%22%3A%22UA8AUBQAUAwAUBoAUAEAYCcAUBkAUB4AUBgAUCAAUAEAUBkAUAwAYAsAYB8AYB0AYBgAYCoAYBgAYB4AUCcAUBsAUB8AUBwAUBIAYBkAYB8AUBoAUBMAUCEAUCIAYBYAUBwAUCAAUBgAUCAAUBcAYBsAYCUAATIPYD0KECQAYDMAYB0AYAsAYCAAYDwAYCIAYB0AYBcAYCQAYB0AYBAAYCMAYAoAYCIAYCEAYCYAYBsAYBUAYAYAYCIAYCMAUB0AUCAAUBYAUCoAUBEAUC8AUB0AUBYAUDMAUDoAUBkAUC0AUBQAUBwAUA0AUBsAUAoAUCEAUBYAUAwAUB4AUAwAUCcAUCYAUCwKYDUAAUUlEC8IYEMAYEgAYDoAYBAAUAMAUBkAWgAAWgAAWgAAWgAAWgAAUAgAWgAAUBAAUAQAUA4AUA8AUAkAUAIAUAYAUAcAUAIAWgAAUAQAUAkAUAEAUBkAUCUAWgAAUAYAUBEAWgAAUBYAWgAAUAYAWgAAWgAAWgAAWgAAUBcAUAcAWgAAUBUAUAoAUAIAWgAAUAQAUAYAUCgAWgAAUAgAWgAAWgAAUAwAWwAAXCMAUBQAWwAAUAIAWgAAWgAAWgAAWgAAWgAAWgAAWgAAWgAAWREAWQIAUAMAWSEAUDoAUDIAUB8AUCEAUC4AXB4AUA4AWgAAUBIAUA8AUBAAUCUAUCIAUAMAUAEAUAsAUAMAUCwAUBYAWgAAWgAAWgAAWgAAWgAAWgAAUAYAWgAAWgAAWgAAUAYAWwAAWgAAUAYAXAQAUAMAUBsAUBcAUCAAWwAAWgAAWgAAWgAAWgAAUBgAUB4AWgAAUAcAUAwAWQIAWQkAUAEAUAIAWgAAUAoAWgAAUAYAUB0AWgAAWgAAUAkAWgAAWSwAUBIAWgAAUC4AWSYAWgAAUAYAUAoAUAkAUAIAUAcAWgAAUAEAUBEAUBgAUBcAWRYAUA0AWSgAUB4AUDQAUBoAXA4AUA8AUBwAUA8AUA4AUA4AWgAAUAIAUCMAWgAAUCwAUBgAUAYAUAAAUAAAUAAAUAAAUAAAUAAAUAAAUAAAUAAAWwAAUAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAeSEAeQ8AcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcBcAcAAAcAAAcCYOcBUAUAAAUAAAUAAAUAAAUAUAUAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcCgAeQAAcAAAcAAAcAAAcAAAcAAAcAYAcAAAcBgAeQAAcAAAcAAAegAAegAAcAAAcAcAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcCkAeQAAcAcAcAAAcAAAcAwAcAAAcAAAcAIAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcCIAeQAAcAAAcAAAcAAAcAAAcAAAeRwAeQAAWgAAUAAAUAAAUAAAUAAAUAAAcAAAcAAAcBoAeScAeQAAegAAcBkAeQAAUAAAUAAAUAAAUAAAUAAAUAAAcAAAcAAAcAAAcAAAcAAAcAAAegAAegAAcAAAcAAAcBgAeQAAcAAAcAAAcAAAcAAAcAAAcAkAegAAegAAcAcAcAAAcAcAcAAAcAAAcAAAcAAAcA8AeQAAcAAAcAAAeRQAcAwAUAAAUAAAUAAAUAAAUAAAUAAAcAAAcBEAcA0AcAAAWQsAUAAAUAAAUAAAUAAAUAAAcAAAcAoAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAYAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcBYAegAAcAAAcAAAegAAcAcAcAAAcAAAcAAAcAAAcAAAeRkAegAAegAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAEAcAAAcAAAcAAAcAUAcAQAcAAAcBIAeQAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcBsAcAAAcAAAcBcAeQAAUAAAUAAAUAAAUAAAUAAAUBQAcBYAUAAAUAAAUAoAWRYAWTQAWQAAUAAAUAAAUAAAcAAAcAAAcAAAcAAAcAAAcAMAcAAAcAQAcAAAcAAAcAAAcDMAeSIAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcAAAcBQAeQwAcAAAcAAAcAAAcAMAcAAAeSoAcA8AcDMAcAYAeQoAcAwAcFQAcEMAeVIAaTYAbBcNYAsAYBIAYAIAYAIAYBUAYCwAYBMAYDYAYCkAYDcAUCoAUCcAUAUAUBAAWgAAYBoAYBcAYCgAUAMAUAYAUBYAUA4AUBgAUAgAUAgAUAsAUAsAUA4AUAMAUAYAUAQAUBIAASsSUDAAUDAAUBAAYAYAUBAAUAUAUCAAUBoAUCAAUBAAUAoAYAIAUAQAUAgAUCcAUAsAUCIAUCUAUAoAUA4AUB8AUBkAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAAfgAA%22%2C%22tz%22%3A32%2C%22did%22%3A%22DA932FFFFE8816E7%22%2C%22src%22%3A24%7D%5D%2C%22summary%22%3A%22%7B%5C%22v%5C%22%3A6%2C%5C%22slp%5C%22%3A%7B%5C%22st%5C%22%3A1628296479%2C%5C%22ed%5C%22%3A1628296479%2C%5C%22dp%5C%22%3A0%2C%5C%22lt%5C%22%3A0%2C%5C%22wk%5C%22%3A0%2C%5C%22usrSt%5C%22%3A-1440%2C%5C%22usrEd%5C%22%3A-1440%2C%5C%22wc%5C%22%3A0%2C%5C%22is%5C%22%3A0%2C%5C%22lb%5C%22%3A0%2C%5C%22to%5C%22%3A0%2C%5C%22dt%5C%22%3A0%2C%5C%22rhr%5C%22%3A0%2C%5C%22ss%5C%22%3A0%7D%2C%5C%22stp%5C%22%3A%7B%5C%22ttl%5C%22%3A<span class="hljs-subst">&#123;self.step&#125;</span>%2C%5C%22dis%5C%22%3A10627%2C%5C%22cal%5C%22%3A510%2C%5C%22wk%5C%22%3A41%2C%5C%22rn%5C%22%3A50%2C%5C%22runDist%5C%22%3A7654%2C%5C%22runCal%5C%22%3A397%2C%5C%22stage%5C%22%3A%5B%7B%5C%22start%5C%22%3A327%2C%5C%22stop%5C%22%3A341%2C%5C%22mode%5C%22%3A1%2C%5C%22dis%5C%22%3A481%2C%5C%22cal%5C%22%3A13%2C%5C%22step%5C%22%3A680%7D%2C%7B%5C%22start%5C%22%3A342%2C%5C%22stop%5C%22%3A367%2C%5C%22mode%5C%22%3A3%2C%5C%22dis%5C%22%3A2295%2C%5C%22cal%5C%22%3A95%2C%5C%22step%5C%22%3A2874%7D%2C%7B%5C%22start%5C%22%3A368%2C%5C%22stop%5C%22%3A377%2C%5C%22mode%5C%22%3A4%2C%5C%22dis%5C%22%3A1592%2C%5C%22cal%5C%22%3A88%2C%5C%22step%5C%22%3A1664%7D%2C%7B%5C%22start%5C%22%3A378%2C%5C%22stop%5C%22%3A386%2C%5C%22mode%5C%22%3A3%2C%5C%22dis%5C%22%3A1072%2C%5C%22cal%5C%22%3A51%2C%5C%22step%5C%22%3A1245%7D%2C%7B%5C%22start%5C%22%3A387%2C%5C%22stop%5C%22%3A393%2C%5C%22mode%5C%22%3A4%2C%5C%22dis%5C%22%3A1036%2C%5C%22cal%5C%22%3A57%2C%5C%22step%5C%22%3A1124%7D%2C%7B%5C%22start%5C%22%3A394%2C%5C%22stop%5C%22%3A398%2C%5C%22mode%5C%22%3A3%2C%5C%22dis%5C%22%3A488%2C%5C%22cal%5C%22%3A19%2C%5C%22step%5C%22%3A607%7D%2C%7B%5C%22start%5C%22%3A399%2C%5C%22stop%5C%22%3A414%2C%5C%22mode%5C%22%3A4%2C%5C%22dis%5C%22%3A2220%2C%5C%22cal%5C%22%3A120%2C%5C%22step%5C%22%3A2371%7D%2C%7B%5C%22start%5C%22%3A415%2C%5C%22stop%5C%22%3A427%2C%5C%22mode%5C%22%3A3%2C%5C%22dis%5C%22%3A1268%2C%5C%22cal%5C%22%3A59%2C%5C%22step%5C%22%3A1489%7D%2C%7B%5C%22start%5C%22%3A428%2C%5C%22stop%5C%22%3A433%2C%5C%22mode%5C%22%3A1%2C%5C%22dis%5C%22%3A152%2C%5C%22cal%5C%22%3A4%2C%5C%22step%5C%22%3A238%7D%2C%7B%5C%22start%5C%22%3A434%2C%5C%22stop%5C%22%3A444%2C%5C%22mode%5C%22%3A3%2C%5C%22dis%5C%22%3A2295%2C%5C%22cal%5C%22%3A95%2C%5C%22step%5C%22%3A2874%7D%2C%7B%5C%22start%5C%22%3A445%2C%5C%22stop%5C%22%3A455%2C%5C%22mode%5C%22%3A4%2C%5C%22dis%5C%22%3A1592%2C%5C%22cal%5C%22%3A88%2C%5C%22step%5C%22%3A1664%7D%2C%7B%5C%22start%5C%22%3A456%2C%5C%22stop%5C%22%3A466%2C%5C%22mode%5C%22%3A3%2C%5C%22dis%5C%22%3A1072%2C%5C%22cal%5C%22%3A51%2C%5C%22step%5C%22%3A1245%7D%2C%7B%5C%22start%5C%22%3A467%2C%5C%22stop%5C%22%3A477%2C%5C%22mode%5C%22%3A4%2C%5C%22dis%5C%22%3A1036%2C%5C%22cal%5C%22%3A57%2C%5C%22step%5C%22%3A1124%7D%2C%7B%5C%22start%5C%22%3A478%2C%5C%22stop%5C%22%3A488%2C%5C%22mode%5C%22%3A3%2C%5C%22dis%5C%22%3A488%2C%5C%22cal%5C%22%3A19%2C%5C%22step%5C%22%3A607%7D%2C%7B%5C%22start%5C%22%3A489%2C%5C%22stop%5C%22%3A499%2C%5C%22mode%5C%22%3A4%2C%5C%22dis%5C%22%3A2220%2C%5C%22cal%5C%22%3A120%2C%5C%22step%5C%22%3A2371%7D%2C%7B%5C%22start%5C%22%3A500%2C%5C%22stop%5C%22%3A511%2C%5C%22mode%5C%22%3A3%2C%5C%22dis%5C%22%3A1268%2C%5C%22cal%5C%22%3A59%2C%5C%22step%5C%22%3A1489%7D%2C%7B%5C%22start%5C%22%3A512%2C%5C%22stop%5C%22%3A522%2C%5C%22mode%5C%22%3A1%2C%5C%22dis%5C%22%3A152%2C%5C%22cal%5C%22%3A4%2C%5C%22step%5C%22%3A238%7D%5D%7D%2C%5C%22goal%5C%22%3A8000%2C%5C%22tz%5C%22%3A%5C%2228800%5C%22%7D%22%2C%22source%22%3A24%2C%22type%22%3A0%7D%5D&#x27;</span><br><br>        t = <span class="hljs-built_in">int</span>(time.time())<br>        timestamp = <span class="hljs-built_in">int</span>(time.time() * <span class="hljs-number">1000</span>)<br>        <span class="hljs-comment"># 修改步数地址</span><br>        url = <span class="hljs-string">f&#x27;https://api-mifit-cn2.huami.com/v1/data/band_data.json?t=<span class="hljs-subst">&#123;timestamp&#125;</span>&#x27;</span><br>        headers = &#123;<br>            <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,<br>            <span class="hljs-string">&#x27;apptoken&#x27;</span>: self.app_token<br>        &#125;<br>        data = <span class="hljs-string">f&#x27;userid=<span class="hljs-subst">&#123;self.user_id&#125;</span>&amp;last_sync_data_time=<span class="hljs-subst">&#123;t&#125;</span>&amp;device_type=0&amp;last_deviceid=DA932FFFFE8816E7&amp;data_json=<span class="hljs-subst">&#123;data_json&#125;</span>&#x27;</span><br><br>        res = requests.post(url, headers=headers, data=data).json()<br>        <span class="hljs-keyword">if</span> res[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-built_in">print</span>(res.json())<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.login():<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.get_token():<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.change_step():<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;【<span class="hljs-subst">&#123;self.username&#125;</span>】成功修改：<span class="hljs-subst">&#123;self.step&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 手机号前面要加上+86</span><br>    username = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment"># 密码</span><br>    password = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment"># 步数 1~30000</span><br>    step = <span class="hljs-string">&#x27;10000&#x27;</span><br>    XiaoMi(username, password, step).main()<br></code></pre></td></tr></table></figure><h1 id="若未同步"><a href="#若未同步" class="headerlink" title="若未同步"></a>若未同步</h1><p>注销小米运动账号，一个小时后再重新注册，重新添加数据源。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML_Study</title>
    <link href="/2024/02/02/HTML-Study/"/>
    <url>/2024/02/02/HTML-Study/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML学习记录"><a href="#HTML学习记录" class="headerlink" title="HTML学习记录"></a>HTML学习记录</h2><h2 id="熟悉HTML"><a href="#熟悉HTML" class="headerlink" title="熟悉HTML"></a>熟悉HTML</h2><p><img src="https://www.runoob.com/wp-content/uploads/2013/06/02A7DD95-22B4-4FB9-B994-DDB5393F7F03.jpg"></p><ul><li><code>&lt;!DOCTYPE  html&gt;</code>声明为HTML5文档</li><li><code>&lt;html&gt;</code>元素是html页面的根元素</li><li><code>&lt;head&gt;</code>元素包含了文档的元数据(meta)，如<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>定义网页编码格式为<strong>utf-8</strong>。</li><li><code>&lt;title&gt;</code>元素描述课文档的标题，可以理解为网站页面的标题</li><li><code>&lt;body&gt;</code>元素包含了可见的页面内容</li><li><code>&lt;h1&gt;</code>元素定义一个大标题</li><li><code>&lt;p&gt;</code>元素定义一个段落</li></ul><h2 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>这里是内容<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;a&gt;</code>是开放标签(开始标签)，<code>&lt;/a&gt;</code>是闭合标签（结束标签）</p><p><strong>HTML元素</strong>和标签是同一个意思，但是HTML元素包含开始标签和结束标签。</p><p>HTML标签有很多指定的标签，每种标签的功能&#x2F;内容都不一样。</p><h2 id="HTML网页结构"><a href="#HTML网页结构" class="headerlink" title="HTML网页结构"></a>HTML网页结构</h2><div style="width:99%;border:1px solid grey;padding:3px;margin:0;background-color:#ddd">&lt;html&gt;<div style="width:90%;border:1px solid grey;padding:3px;margin:20px">&lt;head&gt;<div style="width:90%;border:1px solid grey;padding:5px;margin:20px">&lt;title&gt;页面标题&lt;/title&gt;</div>&lt;/head&gt;</div><div style="width:90%;border:1px solid grey;padding:3px;margin:20px;background-color:#fff">&lt;body&gt;<div style="width:90%;border:1px solid grey;padding:5px;margin:20px">&lt;h1&gt;这是一个标题&lt;/h1&gt;</div><div style="width:90%;border:1px solid grey;padding:5px;margin:20px">&lt;p&gt;这是一个段落。&lt;/p&gt;</div><div style="width:90%;border:1px solid grey;padding:5px;margin:20px">&lt;p&gt;这是另外一个段落。&lt;/p&gt;</div>&lt;/body&gt;</div>&lt;/html&gt;</div><ul><li>只有<code>&lt;body&gt;</code>内容才会在页面中显示</li></ul><h2 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h2><ul><li><p><strong>HTML标题</strong>是通过<code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>标签定义的。</p></li><li><p><strong>HTML段落</strong>是通过<code>&lt;p&gt;</code>来定义的。</p></li><li><p><strong>HTML链接</strong>是通过标签<code>&lt;a&gt;</code>来定义的。</p><p><code>&lt;a href=&quot;https://wechatid.github.io&quot;&gt;Im scamd&#39;Blog&lt;/a&gt;</code></p></li><li><p><strong>HTML图像</strong>是通过标签<code>&lt;img&gt;</code>来定义的。</p><p><code>&lt;img src=&quot;/images/logo.png&quot; width=&quot;258&quot; height=&quot;39&quot; /&gt;</code></p></li></ul><h2 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上包含了三个元素。元素之前可以<strong>嵌套</strong>。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><p>HTML元素以<strong>开始标签</strong>起始，以<strong>结束标签</strong>终止。</p></li><li><p><strong>元素内容</strong>就是开始标签与结束标签之间 的内容。</p></li><li><p>没有内容的元素是<strong>空元素</strong>，空元素在开始标签中进行关闭。</p><p><code>&lt;br&gt;</code>为空元素，定义为换行，可以在开始标签中添加&#x2F;关闭。例如<code>&lt;br/&gt;</code>。</p></li><li><p>大多数HTML元素都可以拥有<strong>属性</strong>。</p></li></ul><h2 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h2><ul><li>HTML元素属性一般在开始标签中描述。</li><li>属性名称以“名称:值”的形式出现。</li></ul><hr><table class="reference"><tbody><tr><th align="left" width="15%">属性</th><th align="left" width="85%">描述</th></tr><tr><td>class</td><td>为html元素定义一个或多个类名（classname）(类名从样式文件引入)</td></tr><tr><td>id</td><td>定义元素的唯一id</td></tr><tr><td>style</td><td>规定元素的行内样式（inline style）</td></tr><tr><td>title</td><td>描述了元素的额外信息 (作为工具条使用)</td></tr></tbody></table><blockquote><p>class名称必须在样式文件css中存在才能引用，可以修改内容样式。</p></blockquote><blockquote><p>id是该标签的唯一id，可以通过js或者css定向修改该id标签的内容。</p></blockquote><hr><p><a href="https://www.runoob.com/tags/ref-standardattributes.html">html属性表</a></p><h2 id="HTML段落"><a href="#HTML段落" class="headerlink" title="HTML段落"></a>HTML段落</h2><p>在HTML段落中无法通过在 HTML 代码中添加额外的空格或换行来改变输出的效果。浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格。</p><p><code>&lt;br&gt;</code>用作换行。</p><h2 id="HTML文本格式化"><a href="#HTML文本格式化" class="headerlink" title="HTML文本格式化"></a>HTML文本格式化</h2><p>….</p>]]></content>
    
    
    <categories>
      
      <category>html</category>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>父亲：我们认识吗</title>
    <link href="/2024/01/29/Father-Do-we-know-each-other/"/>
    <url>/2024/01/29/Father-Do-we-know-each-other/</url>
    
    <content type="html"><![CDATA[<div class="blkContainerSblk collectionContainer">            <h1>父亲：我们认识吗</h1>            <div class="artInfo">                <span id="pub_date">                    作者：岑桑                </span>                <span id="media_name">                    来源：《意林》杂志                </span>            </div>            <div class="blkContainerSblkCon"> <p>　　【—】</p><p>　　在我小时候的印象里，父亲的头顶就是没有头发的，只有几根稀稀拉拉地围在旁边。母亲说，那是倔的，好好个脑袋，倔成个秃头。小时候听到这句话，我是要笑上好半天的。父亲就坐在一旁，满脸愠怒。父亲是中学语文老师，他从不体罚学生，但他会体罚我。字写不好，罚；成绩不好，罚；背不出古诗，罚。</p><p>　　那时我们住在教师小区的一楼，“高志新他爸打他了”是全院小朋友最精彩的节目。</p><p>　　一次，他让我背《行路难》，12句诗，被我背得七零八落。他生气地问：“你到底有没有用心？”我一不留神儿，回话时用了当时特别流行的词。我说：“你变态啊，老师都没让背！”</p><p>　　说完我就知道大事不妙。父亲被那两个字激得大发雷霆。按住我，用钢尺猛抽。</p><p>　　12岁的我，没自尊，没脸皮，只有杀猪一样的痛号。</p><p>　　【二】</p><p>　　中学时代，没人不看漫画，我也迷上了那些充斥着阴暗情节的作品。一次，我逃学去租书，正当我为借到最新一集的漫画得意时，没想到父亲在我身后突然出现了。</p><p>　　那些东西彻底激怒了他，他抓起我的衣领，拳头像雨点一样落了下来。</p><p>　　然而那时的我，早已在那些阴暗的漫画里，学会了不屑和冷漠。我冷冰冰地望着他，哈哈大笑。父亲被我的反常吓住了，他摇着我说：“你傻笑什么？”而我却直直地盯着他，一言不发。</p><p>　　那天回家后，母亲见我脸色不对，小心地问：“志新，没事吧？”</p><p>　　我能有什么事呢？有事的，是我的父亲。</p><p>　　【三】</p><p>　　高二那年，仍然很迷漫画的我决定报考动漫专业，学校在远离北方的广东。当时，动漫专业还不热门，我很轻松就考上了。新生报到，我没有让父母去送，还振振有词地说：“有你们送我的钱，都够坐飞机了。”没想到第二天，机票就送来了。送机那天，父亲也去了，还要了我的QQ号。</p><p>　　就在我转身离开时，身后突然传来父亲苍老的声音，他抑扬顿挫地朗诵起那首我曾经背不出的《行路难》。我听见有工作人员在劝阻，但他依旧不管不顾地大声念着：“长风破浪会有时，直挂云帆济沧海！”</p><p>　　【四】</p><p>　　大学生活很美好，假期我从没回过家。进修、打工，我可以找到太多的理由。</p><p>　　大四那年寒假，父亲带着母亲来看我。那个晚上，父亲喝得有些多，醉醺醺地拉着我说：“爸爸以前打你，你还记恨我不？”</p><p>　　我半开玩笑地说：“当然记恨了，要不我考这么远干吗？”他突然大声说：“这辈子要能重来就好了！”他一口喝光杯子里的酒，很用力地抱了抱我。</p><p>　　毕业后，我在珠海找到了工作。我发现不论自己曾经多么不屑父亲的为人处世，但骨子里还是承袭了他的不变通，于是在公司里，难免有点儿离群。不过这反倒让我更专注于工作。年底，我成了唯一领到年终奖金的新人。</p><p>　　我把奖金全部寄了回去。第二天，我给家里打电话，是母亲接的。我说：“爸呢？”忽然很想和父亲说说话，也许是为了炫耀自己的成绩吧。母亲却犹豫了一下：“你爸睡了。”“大白天的还睡啊，脾气越来越怪了。”</p><p>　　母亲无语地笑了。</p><p>　　【五】</p><p>　　2010年12月的一个晚上，很意外的，家里打来了电话。可是无论我怎么问，那边都只有呼吸声，没人说话。我正寻思出了什么事，就隐隐听见电话里传来了母亲的声音：“你做什么呢？不是让你别玩电话吗？”</p><p>　　真相是父亲患上了老年痴呆症，母亲怕我担心，没告诉我。春节，我赶回了家。</p><p>　　到家时，已是深夜。父亲睡了。母亲拉着我说：“饿不饿？吃点儿东西吧。”</p><p>　　这时，父亲醒了。他坐在床上，像是在找什么。我叫他，他不应。我问母亲：“爸这是做什么呢？”</p><p>　　母亲无奈地说：“他在找电脑呢，你走了以后，他常给你留言，后来发现你不上线，就到你空间里留。现在脑子全糊涂了，能记住的事，就剩下这个了……”</p><p>　　我忽然想起，当年因为怕麻烦，给了他一个旧的QQ号，加了他之后，基本没上过。我凭着记忆登上QQ，发现空间里积满了父亲的留言。有长篇大论的励志文，有琐碎的生活惦念。我仿佛看见渐渐衰老的父亲一个人对着电脑，自言自语的落寞。</p><p>　　后面的留言已经变得很短了。最后一条是在2010年1月16日留的，他说：“别恨爸了，回家来看看，我快要记不住你的样子了。”</p><p>　　那天，我紧紧地抱住床上的父亲，泣不成声。可他却像受不了我突来的亲热，推开我说：“你……是谁啊？我们认识吗？”</p>       </div>]]></content>
    
    
    <categories>
      
      <category>美文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsdelivr出现跳转到raw.githubusercontent.com问题处理</title>
    <link href="/2024/01/27/jsdelivr-cdn-to-gcore/"/>
    <url>/2024/01/27/jsdelivr-cdn-to-gcore/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这几天博客的图片都打不开了，</p><p>原<code>https://cdn.jsdelivr.net/</code>  图片地址打开后都会跳转到</p><p><code>https://raw.githubusercontent.com/</code>，</p><p>但是电信和广电都打不开这个地址，移动的网络却可以！！</p><h2 id="猜测"><a href="#猜测" class="headerlink" title="猜测"></a>猜测</h2><p>估计是因为jsdelivr对GitHub上的图片资源都进行了限制。</p><p>使用GitHub+jsdelivr搭建的图床不是长久之计，但是短期还是可以用的。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>jsdelivr未受影响的域名：</p><ul><li>gcore.jsdelivr.net</li></ul><p>jsdelivr已受影响的域名：</p><ul><li><p>cdn.jsdelivr.net</p></li><li><p>fastly.jsdelivr.net</p></li><li><p>originfastly.jsdelivr.net</p></li><li><p>quantil.jsdelivr.net</p></li></ul><p>把所有<code>cdn.jsdelivr.net</code>都替换成<code>gcore.jsdelivr.net</code></p><p><strong>1. 修改所有文章的图片链接</strong></p><p><strong>2. 修改主题配置文件_config.fluid.yml</strong></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给博客添加每日60秒读懂世界图文</title>
    <link href="/2024/01/27/add-day60s/"/>
    <url>/2024/01/27/add-day60s/</url>
    
    <content type="html"><![CDATA[<h1 id="给你的博客添加每日60秒读懂世界新闻"><a href="#给你的博客添加每日60秒读懂世界新闻" class="headerlink" title="给你的博客添加每日60秒读懂世界新闻"></a>给你的博客添加每日60秒读懂世界新闻</h1><p>记录一下啊方便后续的维护修改</p><p>步骤是：</p><ol><li><p>gitbash输入指令<code>hexo new page &quot;days60s&quot;</code></p><blockquote><p>创建一个自定义页面</p></blockquote></li><li><p>修改主题配置文件：<code>_config.fluid.yml</code></p><p>添加了一下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 在导航栏上添加按钮</span><br><span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;   每日60秒&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/day60s/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-link-fill&quot;</span> &#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># day60s页面的相关配置</span><br><span class="hljs-comment"># 每日60秒</span><br><span class="hljs-attr">day60s:</span><br> <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br> <span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://cdn.jsdelivr.net/gh/wechatid/image/blog/bg.jpg</span><br> <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">60</span><br> <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span><br></code></pre></td></tr></table></figure></li><li><p>配置day60s页面内容：</p><ol><li><p>打开文件<code>\source\day60s\index.md</code></p></li><li><p>写入以下信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 每日60秒读懂世界<br>layout: day60s<br><span class="hljs-section">date: 2024-01-27 17:35:13</span><br><span class="hljs-section">---</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://api.03c3.cn/api/zb&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: block; margin: 0 auto; max-width: 80%; height: auto;&quot;</span>&gt;</span></span><br><br>数据来源于：每日60s读懂世界<br><br>接口来源于：[<span class="hljs-string">云综合- 聚合API服务平台 (03c3.cn)</span>](<span class="hljs-link">https://api.03c3.cn/</span>)<br></code></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫获取空气质量数据</title>
    <link href="/2024/01/26/Python-crawler-air-AQI/"/>
    <url>/2024/01/26/Python-crawler-air-AQI/</url>
    
    <content type="html"><![CDATA[<h1 id="get-text-和strip"><a href="#get-text-和strip" class="headerlink" title="get_text()和strip()"></a>get_text()<code>和</code>strip()</h1><h2 id="get-text-和-strip-是-BeautifulSoup-库中用于处理-HTML-元素的方法"><a href="#get-text-和-strip-是-BeautifulSoup-库中用于处理-HTML-元素的方法" class="headerlink" title="get_text() 和 strip() 是 BeautifulSoup 库中用于处理 HTML 元素的方法"></a><code>get_text()</code> 和 <code>strip()</code> 是 BeautifulSoup 库中用于处理 HTML 元素的方法</h2><h3 id="get-text"><a href="#get-text" class="headerlink" title="get_text()"></a>get_text()</h3><p><code>get_text()</code> 方法是 BeautifulSoup 对象中的一个方法，用于<strong>提取 HTML 元素中的文本内容</strong>。它会将指定元素及其子元素的文本内容提取出来并返回。</p><h3 id="strip"><a href="#strip" class="headerlink" title="strip()"></a>strip()</h3><p><code>strip()</code> 方法是 Python 字符串对象的一个方法，用于<strong>去除</strong>字符串两端的<strong>空白字符</strong>（如空格、制表符等）。它返回一个新的字符串，该字符串是去除了两端空白字符的原字符串副本。</p><h1 id="Python获取一整年的空气质量数据"><a href="#Python获取一整年的空气质量数据" class="headerlink" title="Python获取一整年的空气质量数据"></a>Python获取一整年的空气质量数据</h1><h2 id="可以进行数据分析处理（预测，估计）"><a href="#可以进行数据分析处理（预测，估计）" class="headerlink" title="可以进行数据分析处理（预测，估计）"></a>可以进行数据分析处理（预测，估计）</h2><h2 id="需要导入的库"><a href="#需要导入的库" class="headerlink" title="需要导入的库"></a>需要导入的库</h2><ul><li>requests</li><li>os</li><li>csv</li><li>bs4</li></ul><h2 id="请求标头"><a href="#请求标头" class="headerlink" title="请求标头"></a>请求标头</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 &#x27;</span><br>                  <span class="hljs-string">&#x27;Safari/537.36 &#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="get获取页面数据"><a href="#get获取页面数据" class="headerlink" title="get获取页面数据"></a>get获取页面数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_tr</span>(<span class="hljs-params">mon : <span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-comment"># time.sleep(3)</span><br>    <span class="hljs-comment"># 把1转换为01</span><br>    url = <span class="hljs-string">&#x27;http://www.tianqihoubao.com/aqi/guangzhou-2023&#x27;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;%02d&quot;</span> % mon) + <span class="hljs-string">&#x27;.html&#x27;</span><br>    response = requests.get(url=url, headers=headers)<br>    soup = BeautifulSoup(response.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    tr = soup.find_all(<span class="hljs-string">&#x27;tr&#x27;</span>)<br>    <span class="hljs-keyword">if</span> tr <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据获取失败&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据获取成功&quot;</span>)<br>    <span class="hljs-keyword">return</span> tr<br></code></pre></td></tr></table></figure><h2 id="写入成csv数据文件"><a href="#写入成csv数据文件" class="headerlink" title="写入成csv数据文件"></a>写入成csv数据文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">file_path = <span class="hljs-string">&#x27;air_guangzhou_2023.csv&#x27;</span><br><span class="hljs-keyword">if</span> os.path.exists(file_path):<br>    <span class="hljs-comment"># 文件存在则删除，避免重复数据</span><br>    os.remove(file_path)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    tr1 = get_tr(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> tr1[:<span class="hljs-number">1</span>]:<br>        td1 = k.find_all(<span class="hljs-string">&#x27;td&#x27;</span>)<br>        Date = td1[<span class="hljs-number">0</span>].get_text().strip()<br>        Quality_grade = td1[<span class="hljs-number">1</span>].get_text().strip()<br>        AQI = td1[<span class="hljs-number">2</span>].get_text().strip()<br>        AQI_rank = td1[<span class="hljs-number">3</span>].get_text().strip()<br>        PM25 = td1[<span class="hljs-number">4</span>].get_text().strip()<br>        PM10 = td1[<span class="hljs-number">5</span>].get_text().strip()<br>        So2 = td1[<span class="hljs-number">6</span>].get_text().strip()<br>        No2 = td1[<span class="hljs-number">7</span>].get_text().strip()<br>        CO = td1[<span class="hljs-number">8</span>].get_text().strip()<br>        O3 = td1[<span class="hljs-number">9</span>].get_text().strip()<br>    writer = csv.writer(file)<br>    writer.writerow([Date,Quality_grade,AQI,AQI_rank,PM25,PM10,So2,No2,CO,O3])  <span class="hljs-comment"># 写入表头</span><br>    file.close()<br><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">13</span>):<br>    tr2 = get_tr(<span class="hljs-built_in">int</span>(m))<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> tr2[<span class="hljs-number">1</span>:]:<br>        td2 = j.find_all(<span class="hljs-string">&#x27;td&#x27;</span>)<br>        Date_num = td2[<span class="hljs-number">0</span>].get_text().strip()<br>        Quality_grade_num = td2[<span class="hljs-number">1</span>].get_text().strip()<br>        AQI_num = td2[<span class="hljs-number">2</span>].get_text().strip()<br>        AQI_rank_num = td2[<span class="hljs-number">3</span>].get_text().strip()<br>        PM25_num = td2[<span class="hljs-number">4</span>].get_text().strip()<br>        PM10_num = td2[<span class="hljs-number">5</span>].get_text().strip()<br>        So2_num = td2[<span class="hljs-number">6</span>].get_text().strip()<br>        No2_num = td2[<span class="hljs-number">7</span>].get_text().strip()<br>        CO_num = td2[<span class="hljs-number">8</span>].get_text().strip()<br>        O3_num = td2[<span class="hljs-number">9</span>].get_text().strip()<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;air_guangzhou_2023.csv&#x27;</span>, <span class="hljs-string">&#x27;a+&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8-sig&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(Date_num + <span class="hljs-string">&#x27;,&#x27;</span> + Quality_grade_num + <span class="hljs-string">&#x27;,&#x27;</span> + AQI_num + <span class="hljs-string">&#x27;,&#x27;</span> + AQI_rank_num + <span class="hljs-string">&#x27;,&#x27;</span> + PM25_num + <span class="hljs-string">&#x27;,&#x27;</span> + PM10_num + <span class="hljs-string">&#x27;,&#x27;</span> + So2_num + <span class="hljs-string">&#x27;,&#x27;</span> + No2_num + <span class="hljs-string">&#x27;,&#x27;</span> + CO_num + <span class="hljs-string">&#x27;,&#x27;</span> + O3_num + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;成功抓取<span class="hljs-subst">&#123;m&#125;</span>月份的数据&#x27;</span>)<br></code></pre></td></tr></table></figure><p>以上程序就会保存类型为csv的广州2023年的空气质量指数的数据。</p><p>部分数据预览</p><table><thead><tr><th>日期</th><th>质量等级</th><th>AQI指数</th><th>当天AQI排名</th><th>PM2.5</th><th>PM10</th><th>So2</th><th>No2</th><th>Co</th><th>O3</th></tr></thead><tbody><tr><td>2023&#x2F;1&#x2F;1</td><td>优</td><td>39</td><td>71</td><td>26</td><td>38</td><td>5</td><td>22</td><td>0.73</td><td>56</td></tr><tr><td>2023&#x2F;1&#x2F;2</td><td>优</td><td>41</td><td>78</td><td>27</td><td>41</td><td>6</td><td>20</td><td>0.79</td><td>52</td></tr><tr><td>2023&#x2F;1&#x2F;3</td><td>优</td><td>47</td><td>90</td><td>32</td><td>44</td><td>5</td><td>20</td><td>0.8</td><td>54</td></tr><tr><td>2023&#x2F;1&#x2F;4</td><td>优</td><td>50</td><td>82</td><td>35</td><td>49</td><td>6</td><td>29</td><td>0.8</td><td>40</td></tr><tr><td>2023&#x2F;1&#x2F;5</td><td>优</td><td>50</td><td>71</td><td>33</td><td>52</td><td>6</td><td>41</td><td>0.88</td><td>38</td></tr><tr><td>2023&#x2F;1&#x2F;6</td><td>优</td><td>46</td><td>59</td><td>29</td><td>47</td><td>6</td><td>33</td><td>0.79</td><td>52</td></tr></tbody></table><p>一个很好用的<a href="https://tableconvert.com/zh-cn/">在线表格转换工具 - 让表格转换变得更容易 (tableconvert.com)</a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://ttyun.lanzouq.com/iuXYt1mcfxfe">源码下载</a></p><p>2023广州aqi：<a href="https://ttyun.lanzouq.com/i5Sca1mcgozg">air_guangzhou_2023CSV.zip - 蓝奏云 (lanzouq.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo d推送时报错记录</title>
    <link href="/2024/01/18/hexo-d_error_port22/"/>
    <url>/2024/01/18/hexo-d_error_port22/</url>
    
    <content type="html"><![CDATA[<h1 id="写完音乐爬虫记录推送报错"><a href="#写完音乐爬虫记录推送报错" class="headerlink" title="写完音乐爬虫记录推送报错"></a>写完音乐爬虫记录推送报错</h1><h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">On branch master<br>nothing to commit, working tree clean<br>ssh: connect to host github.com port 22: Connection timed out<br>fatal: Could not <span class="hljs-built_in">read</span> from remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="hljs-string">Error: Spawn failed</span><br><span class="hljs-string">    at ChildProcess.&lt;anonymous&gt; (E:\GitPack\blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="hljs-string">    at ChildProcess.emit (node:events:518:28)</span><br><span class="hljs-string">    at cp.emit (E:\GitPack\blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="hljs-string">    at ChildProcess._handle.onexit (node:internal/child_process:294:12)</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="排错"><a href="#排错" class="headerlink" title="排错"></a>排错</h2><p>推送不了先试试能不能连接上GitHub，使用<code>ssh -T git@github.com</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">zhang@MrZhang-computer MINGW64 /e/GitPack/blog<br>$ ssh -T git@github.com<br>ssh: connect to host github.com port 22: Connection timed out<br><br></code></pre></td></tr></table></figure><p>果然是与GitHub的连接出现问题</p><p>查看用户id和邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">zhang@MrZhang-computer MINGW64 /e/GitPack/blog<br>$ git config user.name<br>wecharid<br><br></code></pre></td></tr></table></figure><ul><li>这里用户id错了。</li><li>邮箱没错。</li><li>修改过后还是连不上，说明与用户信息没关系</li></ul><p>既然不行，那就重新生成一个ssh key连接试试</p><ol><li>我把GitHub上已有的sshkey删了，再在git bash用命令<code>$ ssh-keygen -t rsa -C &quot;2759895370@qq.com&quot;</code>重新生成，配置好后，还是连接不上，说明错误不在这里</li></ol><p>通过网上查询资料得知，是因为端口22断开被掐了，更换一下端口即可</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先找到git的安装目录，找到&#x2F;etc&#x2F;ssh&#x2F;ssh_config文件,使用记事本打开它。</p><p>复制下面内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com<br>User git<br>Hostname ssh.github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/id_rsa<br>Port 443<br></code></pre></td></tr></table></figure><p>粘贴到末行即可。</p><p>连接成功图</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/202401181457688.png" alt="image-20240118145654079"></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python爬虫系列-音乐下载</title>
    <link href="/2024/01/17/python_crawler_music/"/>
    <url>/2024/01/17/python_crawler_music/</url>
    
    <content type="html"><![CDATA[<h1 id="python爬虫网站下载音乐"><a href="#python爬虫网站下载音乐" class="headerlink" title="python爬虫网站下载音乐"></a>python爬虫网站下载音乐</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>免责声明：本教程仅供学习和教育使用，不用于任何商业或非法目的。请在使用本教程前确保遵守所有适用的法律法规。对于您使用本教程所产生的任何后果，包括但不限于法律纠纷、知识产权侵权等，本教程不承担任何责任。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><strong>需要了解及准备的以下信息：</strong></p><ul><li>python3.8及以上</li><li>requests库</li><li>bs4库</li><li>re库</li><li>json库</li><li>音乐网站：<a href="http://www.2t58.com/">http://www.2t58.com/</a></li></ul><h2 id="第一步、设置请求标头信息"><a href="#第一步、设置请求标头信息" class="headerlink" title="第一步、设置请求标头信息"></a>第一步、设置请求标头信息</h2><ol><li><p>打开音乐网站</p></li><li><p>按F12进入开发者选项</p></li><li><p>点击<code>Network</code>或者<code>网络</code>，勾选<code>全部</code>然后刷新获取请求</p></li><li><p>随便点击一条请求，点击<code>标头</code>或者<code>headers</code></p></li><li><p>复制相关信息，在python中创建一个字典保存请求标头信息，例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">headers = &#123;<br>    <span class="hljs-string">&#x27;Host&#x27;</span>:<span class="hljs-string">&#x27;www.2t58.com&#x27;</span>,<br>    <span class="hljs-string">&#x27;Referer&#x27;</span>:<span class="hljs-string">&#x27;http://www.2t58.com/&#x27;</span>,<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36 Edg/120.0.0.0&#x27;</span><br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="第二步、搜索音乐"><a href="#第二步、搜索音乐" class="headerlink" title="第二步、搜索音乐"></a>第二步、搜索音乐</h2><ol><li><p>创建一个url变量存储音乐网站链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">&quot;http://www.2t58.com/so/&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>创建一个搜索的方法<code>def search(url,headers): </code></p><blockquote><p>这个方法实现的功能主要有歌曲下载、歌曲搜索，翻页，以及搜索结果展示。</p><p>其中歌曲下载，结果展示可以另外调用其他方法执行。而翻页又可以用搜索结果展示</p><p>用data，page_lish接收（调用）搜索结果返回的歌曲信息（歌名：链接），页码信息</p><p>用downloda_resu接收下载结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">url, headers</span>):<br>    so = <span class="hljs-string">&#x27;so/&#x27;</span><br>    name = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入歌名/歌手(输入1122退出)：&quot;</span>))<br>    <span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;1122&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    s_url = url + so + name + <span class="hljs-string">&#x27;.html&#x27;</span><br>    response = requests.get(s_url, headers)<br>    soup = BeautifulSoup(response.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><br>    data, page_list = search_list(soup, <span class="hljs-literal">None</span>, headers)<br><br>    <span class="hljs-comment"># 页码</span><br>    end_page_url = [item.get(<span class="hljs-string">&#x27;End&#x27;</span>) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> page_list <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;End&#x27;</span> <span class="hljs-keyword">in</span> item][<span class="hljs-number">0</span>]  <span class="hljs-comment"># 尾页的链接</span><br>    <span class="hljs-comment"># 这里有一个小坑，search_name是从网页元素中text字符串截取出来的</span><br>    <span class="hljs-comment"># 网页中这段文字有空格，所以要用用户输入的name截取页码</span><br>    end_page_index_start = end_page_url.find(name + <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-built_in">len</span>(name + <span class="hljs-string">&#x27;/&#x27;</span>)<br>    end_page_index_end = end_page_url.find(<span class="hljs-string">&#x27;.html&#x27;</span>)<br>    end_page_num = end_page_url[end_page_index_start:end_page_index_end]<br>    current_page = [item.get(<span class="hljs-string">&#x27;Cur_Pg&#x27;</span>) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> page_list <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Cur_Pg&#x27;</span> <span class="hljs-keyword">in</span> item][<span class="hljs-number">0</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;第<span class="hljs-subst">&#123;current_page&#125;</span>/<span class="hljs-subst">&#123;end_page_num&#125;</span>页\t&quot;</span>)<br><br>    <span class="hljs-comment"># 指令</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 翻页</span><br>        <span class="hljs-comment">## 页码url获取</span><br>        pgup = <span class="hljs-literal">None</span><br>        pgdw = <span class="hljs-literal">None</span><br>        home = <span class="hljs-literal">None</span><br>        end = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">for</span> page_item <span class="hljs-keyword">in</span> page_list:<br>            <span class="hljs-comment">## 赋值翻页url</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;PgDw&#x27;</span> <span class="hljs-keyword">in</span> page_item:<br>                pgdw = page_item[<span class="hljs-string">&#x27;PgDw&#x27;</span>]<br>            <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;PgUp&#x27;</span> <span class="hljs-keyword">in</span> page_item:<br>                pgup = page_item[<span class="hljs-string">&#x27;PgUp&#x27;</span>]<br>            <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;Home&#x27;</span> <span class="hljs-keyword">in</span> page_item:<br>                home = page_item[<span class="hljs-string">&#x27;Home&#x27;</span>]<br>            <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;End&#x27;</span> <span class="hljs-keyword">in</span> page_item:<br>                end = page_item[<span class="hljs-string">&#x27;End&#x27;</span>]<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入歌曲前面的序号下载，输入h跳转到第一页，输入e跳转到最后一页，输入u上一页，输入d下一页&quot;</span>)<br>        instructions = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入:&quot;</span>)<br>        <span class="hljs-keyword">if</span> instructions == <span class="hljs-string">&quot;d&quot;</span> <span class="hljs-keyword">or</span> instructions == <span class="hljs-string">&quot;D&quot;</span>:<br>            <span class="hljs-keyword">if</span> pgdw <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                pgdw_url = url + pgdw<br>                data, page_list = search_list(soup,pgdw_url,headers)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前是最后一页。&quot;</span>)<br>        <span class="hljs-keyword">elif</span> instructions == <span class="hljs-string">&#x27;u&#x27;</span> <span class="hljs-keyword">or</span> instructions == <span class="hljs-string">&#x27;U&#x27;</span>:<br>            <span class="hljs-keyword">if</span> pgup <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                pgup_url = url + pgup<br>                data, page_list = search_list(soup, pgup_url, headers)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前是第一页&quot;</span>)<br>        <span class="hljs-keyword">elif</span> instructions == <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">or</span> instructions == <span class="hljs-string">&#x27;H&#x27;</span>:<br>            <span class="hljs-keyword">if</span> home <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                home_url = url + home<br>                data, page_list = search_list(soup, home_url, headers)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前是第一页&quot;</span>)<br>        <span class="hljs-keyword">elif</span> instructions == <span class="hljs-string">&#x27;e&#x27;</span> <span class="hljs-keyword">or</span> instructions == <span class="hljs-string">&#x27;E&#x27;</span>:<br>            <span class="hljs-keyword">if</span> end <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                end_url = url + end<br>                data, page_list = search_list(soup, end_url, headers)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前是最后一页&quot;</span>)<br>        <span class="hljs-comment"># 下载歌曲</span><br>        <span class="hljs-keyword">elif</span> instructions.isdigit():<br>            instructions = <span class="hljs-built_in">int</span>(instructions)<br>            <span class="hljs-keyword">if</span> instructions &gt; <span class="hljs-built_in">len</span>(data) <span class="hljs-keyword">or</span> instructions &lt; <span class="hljs-number">1</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请输入歌曲前面的序号&quot;</span>)<br>                <span class="hljs-keyword">continue</span><br>            song_url =url + data[instructions - <span class="hljs-number">1</span>][<span class="hljs-string">&#x27;url&#x27;</span>]<br>            downloda_resu = song_download(song_url,<span class="hljs-string">&#x27;music&#x27;</span>)<br>            <span class="hljs-keyword">if</span> downloda_resu:<br>                continu_inst = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;是否继续下载y/n(任意键退出程序):&quot;</span>)<br>                <span class="hljs-keyword">if</span> continu_inst == <span class="hljs-string">&quot;y&quot;</span> <span class="hljs-keyword">or</span> continu_inst == <span class="hljs-string">&quot;Y&quot;</span>:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">elif</span> continu_inst == <span class="hljs-string">&quot;n&quot;</span> <span class="hljs-keyword">or</span> continu_inst == <span class="hljs-string">&quot;N&quot;</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="第三步、歌曲列表展示及歌曲链接"><a href="#第三步、歌曲列表展示及歌曲链接" class="headerlink" title="第三步、歌曲列表展示及歌曲链接"></a>第三步、歌曲列表展示及歌曲链接</h2><ol><li><p>创建一个<code>def search_list(soup, url, headers):</code>方法</p></li><li><p>suop是初始搜索歌曲时获取到的html数据，url是翻页链接，当url为空时，是初始搜索时展示的第一页歌曲信息，url不为空，说明得到了翻页指令，要重新解析翻页链接得到html元素在展示新页面的歌曲信息。</p></li><li><p>其中data数据格式是：</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;陈奕迅 - 爱情转移-《爱情呼叫转移》电影主题曲|《富士山下》国语版&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;/song/bWRza2ht.html&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;陈奕迅 - 富士山下-《爱情转移》粤语版&#x27;</span>, <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;/song/ZHdubmRr.html&#x27;</span>&#125;]<br></code></pre></td></tr></table></figure></blockquote><p>page_lish数据格式是:</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[&#123;<span class="hljs-string">&#x27;Cur_Pg&#x27;</span>: <span class="hljs-string">&#x27;2&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;Home&#x27;</span>: <span class="hljs-string">&#x27;/so/富士山下/1.html&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;PgUp&#x27;</span>: <span class="hljs-string">&#x27;/so/富士山下/1.html&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;PgDw&#x27;</span>: <span class="hljs-string">&#x27;/so/富士山下/3.html&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;End&#x27;</span>: <span class="hljs-string">&#x27;/so/富士山下/7.html&#x27;</span>&#125;]<br></code></pre></td></tr></table></figure></blockquote></li></ol><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">search_list</span>(<span class="hljs-params">soup, url, headers</span>):<br>    <span class="hljs-comment"># 用来展示音乐列表和返回当前是第几页</span><br><br>    <span class="hljs-keyword">if</span> url <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 判断是否页面变动</span><br>        response = requests.get(url, headers)<br>        soup = BeautifulSoup(response.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><br>    <span class="hljs-comment"># 搜索的歌曲名字</span><br>    search_name = soup.select_one(<span class="hljs-string">&#x27;.title h1&#x27;</span>).text.replace(<span class="hljs-string">&#x27;结果列表&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-comment"># 搜索结果 共有*条结果</span><br>    result_count = soup.select_one(<span class="hljs-string">&#x27;.pagedata span&#x27;</span>).text<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-number">0</span>&#125;</span>\t<span class="hljs-subst">&#123;search_name&#125;</span>\t共有<span class="hljs-subst">&#123;result_count&#125;</span>条结果\t&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">30</span>)<br><br>    <span class="hljs-comment"># 用来保存歌曲信息的列表</span><br>    data = []<br>    result_list = soup.select(<span class="hljs-string">&#x27;.name a&#x27;</span>)<br><br>    <span class="hljs-keyword">for</span> song_info <span class="hljs-keyword">in</span> result_list:<br>        <span class="hljs-comment"># 用列表保存键值对的形式</span><br>        song_name = song_info.text<br>        song_url = song_info[<span class="hljs-string">&#x27;href&#x27;</span>]<br>        data.append(&#123;<span class="hljs-string">&#x27;name&#x27;</span>: song_name, <span class="hljs-string">&#x27;url&#x27;</span>: song_url&#125;)<br><br>    <span class="hljs-comment"># 页</span><br>    pages_list = []<br>    pages = soup.select(<span class="hljs-string">&#x27;.page a&#x27;</span>)<br>    current_page = soup.find(<span class="hljs-string">&#x27;a&#x27;</span>, class_=<span class="hljs-string">&#x27;current&#x27;</span>)<br>    pages_list.append(&#123;<span class="hljs-string">&#x27;Cur_Pg&#x27;</span>: current_page.text&#125;)<br>    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> pages:<br>        <span class="hljs-keyword">if</span> page.text == <span class="hljs-string">&#x27;下一页&#x27;</span>:<br>            pages_list.append(&#123;<span class="hljs-string">&#x27;PgDw&#x27;</span>: page[<span class="hljs-string">&#x27;href&#x27;</span>]&#125;)<br>        <span class="hljs-keyword">elif</span> page.text == <span class="hljs-string">&#x27;上一页&#x27;</span>:<br>            pages_list.append(&#123;<span class="hljs-string">&#x27;PgUp&#x27;</span>: page[<span class="hljs-string">&#x27;href&#x27;</span>]&#125;)<br>        <span class="hljs-keyword">elif</span> page.text == <span class="hljs-string">&#x27;首页&#x27;</span>:<br>            pages_list.append(&#123;<span class="hljs-string">&#x27;Home&#x27;</span>: page[<span class="hljs-string">&#x27;href&#x27;</span>]&#125;)<br>        <span class="hljs-keyword">elif</span> page.text == <span class="hljs-string">&#x27;尾页&#x27;</span>:<br>            pages_list.append(&#123;<span class="hljs-string">&#x27;End&#x27;</span>: page[<span class="hljs-string">&#x27;href&#x27;</span>]&#125;)<br><br><br>    counter = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> song_data <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-comment"># 打印结果</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;counter&#125;</span>\t<span class="hljs-subst">&#123;song_data[<span class="hljs-string">&quot;name&quot;</span>]&#125;</span>\t&#x27;</span>)<br>        counter += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span> * <span class="hljs-number">30</span>)<br>    <span class="hljs-keyword">return</span> data, pages_list<br></code></pre></td></tr></table></figure><h2 id="第四步、歌曲下载"><a href="#第四步、歌曲下载" class="headerlink" title="第四步、歌曲下载"></a>第四步、歌曲下载</h2><p>当做到这一步时，兴致勃勃的以为就要大工告成了。</p><ol><li><p>开心的打开歌曲播放页面，按下万能的<code>F12</code>，怎么着？找到音乐资源藏在了一个<code>audio</code>的标签里面</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/yy1.png" alt="image-20240118131316168"></p></li><li><p>打开python，resquests.get一下这个页面，用bs4处理去找<code>audio</code>这个标签下的src值，怎么着？它给我报错了，说找不到audio这个标签。</p></li><li><p>把soup打印出来看一下，确实是没有audio这个标签，与网页源代码对比，少了一个播放器player。</p></li><li><p>猜想：音乐资源和播放器是通过js脚本动态加载的，get获取只能获取静态资源，所以没有audio这个标签。</p></li><li><p>验证：刷新网页，打开<strong>事件侦听器</strong>，播放音乐…没反应。查看html元素是否存在<code>audio</code>,刚打开，就侦听到了两个js脚本。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/yy2.png" alt="image-20240118131742556"></p></li><li><p>看到<code>jPlayer_waiting</code>十分可疑，在第十行，进去打个断点，刷新，经过检验，audio及播放器就是在这里生成的，采用的是Ajax（异步加载技术）不过这没关系。因为我看见它上面写明了通过post提交方式获取到歌曲信息</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/yy3.png" alt="image-20240118132543696"></p></li><li><p>post请求，且数据只有id和type，应该是歌曲id和类型了，试一下这两个</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/yy4.png" alt="image-20240118132932115"></p></li></ol><p>​去提交一下果然成功获取到了歌曲文件直链。</p><p>接下来就是完善一下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">song_download</span>(<span class="hljs-params">song_url,<span class="hljs-built_in">type</span></span>):<br>    <span class="hljs-comment"># 下载歌曲的方法</span><br>    <span class="hljs-comment"># 正则表达式获取歌曲id</span><br>    pattern = <span class="hljs-string">r&#x27;/song/(.*?)\.html&#x27;</span><br>    song_id = re.search(pattern, song_url)<br>    <span class="hljs-keyword">if</span> song_id:<br>        song_id = song_id.group(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;下载失败，原因：id未获取&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># 获取歌曲下载链接</span><br>    api = <span class="hljs-string">&#x27;http://www.2t58.com/js/play.php&#x27;</span><br>    headers2 = &#123;<br>        <span class="hljs-string">&quot;Referer&quot;</span>: song_url,<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36 Edg/120.0.0.0&quot;</span><br>    &#125;<br>    data = &#123;<br>        <span class="hljs-string">&#x27;id&#x27;</span>: song_id,<br>        <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-built_in">type</span><br>    &#125;<br>    response = requests.post(api, data=data, headers=headers2)<br>    result = json.loads(response.content)<br>    <span class="hljs-keyword">try</span>:<br>        song_name = result[<span class="hljs-string">&#x27;title&#x27;</span>]<br>        download_link = result[<span class="hljs-string">&#x27;url&#x27;</span>]<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载失败，原因：链接失效&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    download = requests.get(download_link)<br>    <span class="hljs-keyword">if</span> download.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;song_name&#125;</span>.mp3&quot;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            file.write(download.content)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;歌曲文件下载成功&#x27;</span>)<br>            file.close()<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;下载失败，原因：歌曲直链失效&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br></code></pre></td></tr></table></figure><h2 id="第五步、主程序创建"><a href="#第五步、主程序创建" class="headerlink" title="第五步、主程序创建"></a>第五步、主程序创建</h2><p>上面程序中，只能运行一次就结束运行了，创建个主程序，让它不在主动退出的情况下，能一直保持运行状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        state = search(url,headers)<br>        <span class="hljs-keyword">if</span> state:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><center>思维框架导图</center><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/yy_swdt.png" alt="image-20240118133657675"></p><p>完整代码下载链接：<a href="https://ttyun.lanzouq.com/iEu5J1lgjtda">点击进入下载</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫小练习-扒取网站小说</title>
    <link href="/2024/01/14/python_crawler_novel/"/>
    <url>/2024/01/14/python_crawler_novel/</url>
    
    <content type="html"><![CDATA[<h1 id="爬取网站小说并保存到本地の学习记录"><a href="#爬取网站小说并保存到本地の学习记录" class="headerlink" title="爬取网站小说并保存到本地の学习记录"></a>爬取网站小说并保存到本地の学习记录</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次学习级别为新手村学习，简单易懂，特别适合刚学习python的练手项目。</p><ul><li>请注意，本人提供的信息仅用于<strong>个人学习目的</strong>，并且不涉及公开或分享任何目标网站的相关链接或信息。爬取网站内容应遵守适用的法律法规、知识产权和隐私保护规定。<strong>在未获得授权的情况下，不得非法获取、使用或传播他人的数据、信息或资源。</strong>爬取操作应遵循合理的频率和并发量，以避免对目标网站造成过度负荷或干扰正常运营。<strong>本人不对任何因违反上述规定而导致的法律责任或纠纷承担责任。</strong>请确保你的行为符合相关法律法规，并尊重他人的权益和隐私。</li></ul><h3 id="爬虫的基本知识"><a href="#爬虫的基本知识" class="headerlink" title="爬虫的基本知识"></a>爬虫的基本知识</h3><p><strong>爬虫</strong>：一段自动抓取互联网信息的程序，从互联网上抓取对于我们有价值的信息。</p><ul><li><strong>调度器：</strong>相当于一台电脑的CPU，主要负责调度URL管理器、下载器、解析器之间的协调工作。</li><li><strong>URL管理器：</strong>包括待爬取的URL地址和已爬取的URL地址，防止重复抓取URL和循环抓取URL，实现URL管理器主要用三种方式，通过内存、数据库、缓存数据库来实现。</li><li><strong>网页下载器：</strong>通过传入一个URL地址来下载网页，将网页转换成一个字符串，网页下载器有urllib2（Python官方基础模块）包括需要登录、代理、和cookie，requests(第三方包)</li><li><strong>网页解析器：</strong>将一个网页字符串进行解析，可以按照我们的要求来提取出我们有用的信息，也可以根据DOM树的解析方式来解析。网页解析器有正则表达式（直观，将网页转成字符串通过模糊匹配的方式来提取有价值的信息，当文档比较复杂的时候，该方法提取数据的时候就会非常的困难）、html.parser（Python自带的）、beautifulsoup（第三方插件，可以使用Python自带的html.parser进行解析，也可以使用lxml进行解析，相对于其他几种来说要强大一些）、lxml（第三方插件，可以解析 xml 和 HTML），html.parser 和 beautifulsoup 以及 lxml 都是以 DOM 树的方式进行解析的。</li><li><strong>应用程序：</strong>就是从网页中提取的有用数据组成的一个应用。</li></ul><h2 id="需要安装的库"><a href="#需要安装的库" class="headerlink" title="需要安装的库"></a>需要安装的库</h2><ul><li>requests</li><li>bs4</li><li>re</li><li>time</li></ul><h2 id="一、构建获取小说的方法"><a href="#一、构建获取小说的方法" class="headerlink" title="一、构建获取小说的方法"></a>一、构建获取小说的方法</h2><p>打开网页，F12对小说页面内容进行分析。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/202401141551974.png"></p><p>发现小说内容都在一个id为<code>chaptercontent</code>的div标签里面，并且用<code>&lt;br&gt;</code>标签分行保存，因此我们只需要获取<code>&lt;br&gt;</code>里面的内容就行了。但一章小说分了好多页，获取下一章按钮的<code>href </code>值就能获取下一页的内容了。</p><blockquote><p>代码如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_text</span>(<span class="hljs-params">url, name, zhangjie</span>):<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36&#x27;</span>,<br>    &#125;<br>    <span class="hljs-comment"># 请求头</span><br><br>    <span class="hljs-comment"># 初始化url_line为传入的url</span><br>    url_line = url<br>    web = url[:url.find(<span class="hljs-string">&#x27;/b&#x27;</span>)]  <span class="hljs-comment"># 获取域名</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># 发送请求</span><br>        response = requests.get(url_line, headers=headers)<br>        html = response.text<br><br>        <span class="hljs-comment"># 使用BeautifulSoup解析HTML内容</span><br>        soup = BeautifulSoup(html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br>        <span class="hljs-comment"># 找到章节内容和下一章的链接</span><br>        chapter_content = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;chaptercontent&#x27;</span>&#125;)<br>        next_url = soup.find(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;pb_next&#x27;</span>, class_=<span class="hljs-string">&#x27;Readpage_down js_page_down&#x27;</span>).get(<span class="hljs-string">&#x27;href&#x27;</span>)<br><br>        <span class="hljs-comment"># 拼接下一章的链接，准备进行下一次请求</span><br>        url_line = web + next_url<br><br>        text = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 存放正文内容</span><br>        end_text = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 存放“第(x-x)部分”这样的文字</span><br><br>        <span class="hljs-comment"># 如果找到了章节内容，则提取正文，并判断是否需要停止爬取</span><br>        <span class="hljs-keyword">if</span> chapter_content:<br>            paragraphs = []<br>            <span class="hljs-keyword">for</span> br_tag <span class="hljs-keyword">in</span> chapter_content.find_all(<span class="hljs-string">&#x27;br&#x27;</span>):<br>                <span class="hljs-comment"># 遍历每个&lt;br&gt;标签，找到相邻的文本节点并将其合并为一个段落</span><br>                paragraph = []<br>                next_node = br_tag.next_sibling<br>                <span class="hljs-keyword">while</span> next_node <span class="hljs-keyword">and</span> next_node.name != <span class="hljs-string">&#x27;br&#x27;</span>:<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(next_node, <span class="hljs-built_in">str</span>):  <span class="hljs-comment"># 过滤掉非字符串类型节点</span><br>                        paragraph.append(next_node.strip())<br>                    next_node = next_node.next_sibling<br><br>                <span class="hljs-keyword">if</span> paragraph:<br>                    paragraphs.append(<span class="hljs-string">&#x27;&#x27;</span>.join(paragraph))<br><br>            <span class="hljs-comment"># 遍历每个段落，将正文内容和end_text保存到相应变量中</span><br>            <span class="hljs-keyword">for</span> i, paragraph <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(paragraphs):<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;第(&#x27;</span> <span class="hljs-keyword">in</span> paragraph:  <span class="hljs-comment"># 如果当前段落包含“第(x-x)部分”这样的文字</span><br>                    end_text = <span class="hljs-string">&#x27;&#x27;</span>.join(paragraph)<br>                    numbers = re.findall(<span class="hljs-string">r&#x27;\d+&#x27;</span>, end_text)<br>                    <span class="hljs-keyword">try</span>:<br>                        start = <span class="hljs-built_in">int</span>(numbers[<span class="hljs-number">0</span>])<br>                        end = <span class="hljs-built_in">int</span>(numbers[<span class="hljs-number">1</span>])<br>                    <span class="hljs-keyword">except</span>:<br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">if</span> start &gt;= end:  <span class="hljs-comment"># 如果已经爬取完全部部分，则返回True</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;(本&#x27;</span> <span class="hljs-keyword">in</span> paragraph:  <span class="hljs-comment"># 如果当前段落包含“(本章未完，请翻页)”这样的文字，则跳过</span><br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;.com&#x27;</span> <span class="hljs-keyword">in</span> paragraph:  <span class="hljs-comment"># 如果当前段落包含网站链接，则跳过</span><br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">else</span>:<br>                    text += <span class="hljs-string">&#x27;&#x27;</span>.join(paragraph) + <span class="hljs-string">&#x27;\n&#x27;</span>  <span class="hljs-comment"># 将当前段落作为正文内容的一部分</span><br><br>            <span class="hljs-comment"># 将正文内容保存到文件中，并输出提示信息</span><br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(text)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;zhangjie&#125;</span>  第<span class="hljs-subst">&#123;start&#125;</span>部分下载完成。&#x27;</span>)<br>            <span class="hljs-comment"># time.sleep(0.5)</span><br><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未找到章节内容&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br></code></pre></td></tr></table></figure><h2 id="二、对目录页进行解析"><a href="#二、对目录页进行解析" class="headerlink" title="二、对目录页进行解析"></a>二、对目录页进行解析</h2><p>爬虫第一步，首先要明确直接要获取什么内容、理清整体思路。</p><ol><li>解析网站</li></ol><p>打开小说网站，随便打开一部小说的目录页面。</p><p>从表面上我们可以获取到信息有：小说名称、小说详细信息、内容简介、最新章节预览、最新章节列表。</p><ol><li><p>获取小说名字</p><p>按F12，查看网页元素结构、对网页结果进行解析。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/image-20240114122500513.png"></p><p>如图，不难找到存放小说名称的标签<code>dt</code>、属性<code>class</code>，复制链接url、用python获取一下小说名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">headers = &#123;<br>        <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36&#x27;</span>,<br>    &#125;<br><br>response = requests.get(url, headers=headers)<br>html = response.text<br>soup = BeautifulSoup(html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>name = soup.find(<span class="hljs-string">&#x27;dt&#x27;</span>, class_=<span class="hljs-string">&#x27;name&#x27;</span>).text.strip()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;小说名称：<span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还可以获取其他信息，方法一样，只需要修改标签和class的值就行</p></li><li><p>获取章节的链接</p><p>如图，章节链接都存放在属性为<code>book_last</code>的div标签里,但是这里有两个同样的标签，需要获取第二个。</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/pc726.png" alt="image-20240114150028146"></p></li><li><p>获取章节名称</p><p>如上图，章节名称存放在标签<code>&lt;a&gt; &lt;a/&gt;</code>之间，在获取章节链接的同时可以同时获取章节名称</p></li><li><p>获取目录页链接</p><p>查看整个页面，一个页面只显示前面前二十章，也就是说这一页只有前面二十章的目录信息。点击下页看看。发现链接改变了</p><table><thead><tr><th><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/pc21.png" alt="原始链接"></th><th><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/pc22.png" alt="image-20240114125122786"></th></tr></thead></table><p>方法一：把2改成3跳转到了该小说的第三页 ，一次类推下去就是整部小说的章节目录了（但是这种方法有局限性）</p><p>方法二：获取下一页按钮的<code>href</code>值</p><h3 id="调用get-text方法实现下载小说"><a href="#调用get-text方法实现下载小说" class="headerlink" title="调用get_text方法实现下载小说"></a>调用get_text方法实现下载小说</h3><blockquote><p>代码如下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> get_text<br><br>url = <span class="hljs-string">&#x27;https://.com/book_19922/&#x27;</span><br><br><span class="hljs-comment"># 获取域名</span><br>index = url.find(<span class="hljs-string">&#x27;/b&#x27;</span>)<br>zhangjie_url = url[url.find(<span class="hljs-string">&#x27;/b&#x27;</span>):]<br><span class="hljs-keyword">if</span> index != -<span class="hljs-number">1</span>:<br>    web = url[:index]<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;未找到 &#x27;ch&#x27;&quot;</span>)<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36&#x27;</span>,<br>&#125;<br><br><span class="hljs-comment"># 发送请求获取小说首页内容</span><br>response = requests.get(url, headers=headers)<br>html = response.text<br>soup = BeautifulSoup(html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br><span class="hljs-comment"># 获取小说名称</span><br>name = soup.find(<span class="hljs-string">&#x27;dt&#x27;</span>, class_=<span class="hljs-string">&#x27;name&#x27;</span>).text.strip()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;小说名称：<span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 拼接章节url</span><br>    url_line = web + zhangjie_url<br><br>    <span class="hljs-comment"># 发送请求获取章节内容页</span><br>    response_1 = requests.get(url_line, headers=headers)<br>    html_1 = response_1.text<br>    soup_1 = BeautifulSoup(html_1, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    zhangjie_url = soup_1.find(<span class="hljs-string">&#x27;a&#x27;</span>, class_=<span class="hljs-string">&quot;onclick&quot;</span>).get(<span class="hljs-string">&#x27;href&#x27;</span>)<br><br>    <span class="hljs-comment"># 使用选择器定位符合条件的元素</span><br>    element = soup_1.select_one(<span class="hljs-string">&#x27;.book_last dl dt:-soup-contains(&quot;最新章节列表&quot;)&#x27;</span>)<br><br>    link = <span class="hljs-literal">None</span><br>    text = <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment"># 遍历获取标签里面的内容</span><br>    <span class="hljs-keyword">if</span> element:<br>        parent_element = element.parent  <span class="hljs-comment"># 获取父级元素 dl</span><br>        <span class="hljs-keyword">for</span> tag <span class="hljs-keyword">in</span> parent_element.find_all(<span class="hljs-string">&#x27;dd&#x27;</span>):<br>            <span class="hljs-keyword">if</span> tag.name == <span class="hljs-string">&#x27;dd&#x27;</span> <span class="hljs-keyword">and</span> tag.a:<br>                link = tag.a.get(<span class="hljs-string">&#x27;href&#x27;</span>)  <span class="hljs-comment"># 获取 href 属性的值</span><br>                text = tag.a.text.strip()  <span class="hljs-comment"># 获取文本内容</span><br>                text_url = web + link<br>                <span class="hljs-comment"># 传递小说页过去</span><br>                downld = get_text.get_text(text_url, name, text)<br>                <span class="hljs-keyword">if</span> downld:<br>                    time.sleep(<span class="hljs-number">0.5</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;text&#125;</span>下载失败，请检查&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> link <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> text <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;小说《<span class="hljs-subst">&#123;name&#125;</span>》，下载完成！&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    time.sleep(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h2 id="三、整体逻辑"><a href="#三、整体逻辑" class="headerlink" title="三、整体逻辑"></a>三、整体逻辑</h2><p>在已经获得<strong>小说目录链接</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="![目录页面](https://gcore.jsdelivr.net/gh/wechatid/image/blog/pc1.png)">[1]</span></a></sup>的前提下,创建一个循环：获取小说名字，获取目录页的章节链接，获取章节名字。然后把章节链接，小说名字，章节名字传递到获取的小说方法<code>get_text</code>里去下载章节内容，下载成功则继续下一遍循环，错误则结束运行。</p></li></ol><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/pc1.png" alt="目录页面"><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于初期建博的一些说明</title>
    <link href="/2024/01/12/blog_build/"/>
    <url>/2024/01/12/blog_build/</url>
    
    <content type="html"><![CDATA[<h1 id="关于初期建博客的一些说明"><a href="#关于初期建博客的一些说明" class="headerlink" title="关于初期建博客的一些说明"></a>关于初期建博客的一些说明</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先要特别鸣谢<strong>Fany Full’s Blog</strong>，以及<strong>WSKH0929</strong>的教程，对我的帮助真的很大。</p><ul><li><p><a href="http://fanyfull.github.io/2021/10/16/Github-Hexo-%E7%9C%9F-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA-GitHub-%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/">GiHub + Hexo 真·从零开始搭建个人博客</a></p></li><li><p><a href="https://blog.csdn.net/weixin_51545953/article/details/128499341">【个人博客】Hexo个人博客搭建与配置详细教程 + Fluid主题 + Gitee发布_fluid文章页设置-CSDN博客</a></p></li></ul><blockquote><p>建站参考教程 （超级详细 真从零开始）</p></blockquote><p>其实很早之前就想建一个存放学习笔记的一个博客，之前也试过从网上找的一些博客源码放在一个虚拟主机上，实在时太麻烦了，需要域名，主机，以及维护成本。后来接触到<a href="www.github.io">GitHub</a>,了解到页面托管这个功能才让我死而复燃的心决定去搞一个自己的学习博客！</p><h2 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h2><ol><li><p>github 账号</p><blockquote><p> GitHub官网<a href="https://github.com/">GitHub</a></p></blockquote></li><li><p>安装Git</p><blockquote><p>Git官网<a href="https://git-scm.com/">Git (git-scm.com)</a>，国内访问会比较慢</p><p>国内镜像网站<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">CNPM Binaries Mirror (npmmirror.com)</a></p></blockquote></li><li><p>安装Nodejs</p><blockquote><p> Node官网<a href="https://nodejs.org/en/">Node.js (nodejs.org)</a><br>在Windows上安装时务必选择全部组件，包括<code>勾选 Add to Path</code>。</p></blockquote></li><li><p>GitHub加速上网软件</p><blockquote><p> <a href="https://steampp.net/">瓦特工具箱(Steam++官网) - Watt Toolkit (steampp.net)</a> </p></blockquote><p><code>steam++在Git和PicGo上连不上GitHub，使用时要把加速关闭</code></p></li><li><p>安装PIcGo图床</p><blockquote><p> PicGo官网<a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo</a></p></blockquote></li><li><p>一个markdown编辑器</p></li></ol><blockquote><p>Nodejs必须安装，可以使用cdm命令行检验是否安装成功（图为安装成功示例）</p><p><img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/202401121110565.png" alt="image-20240112110858062"></p></blockquote><h2 id="建一个Page托管的仓库"><a href="#建一个Page托管的仓库" class="headerlink" title="建一个Page托管的仓库"></a>建一个Page托管的仓库</h2><ol><li><p>登录你的GitHub账号</p></li><li><p>新建仓库，仓库名为<code>username.github.io</code>，username替换为GitHub账户的实际ID，例如：wechatid.github.io ，实际博客地址就是 <a href="https://wechatid.github.io/">https://wechatid.github.io</a> </pr></p><p><img src="https://gcore.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016165332.png"></p><ol start="3"><li>配置页面托管</li></ol><p>​<img src="https://gcore.jsdelivr.net/gh/wechatid/image/blog/202401121255222.png" alt="image-20240112125530706"></p><blockquote><p>注意：每个用户只能开启一个pages托管</p></blockquote></li></ol><h2 id="Git配置用户信息"><a href="#Git配置用户信息" class="headerlink" title="Git配置用户信息"></a>Git配置用户信息</h2><ol><li><p>在电脑本地新建文件夹，用来存放博客的所有文件。我的是“blog”，所以下面就说的blog文件夹实际就是存放博客的文件夹。</p></li><li><p>打开blog文件夹，右击鼠标，点击<code>Git Bash here</code>，弹出命令窗口。</p></li><li><p>在窗口中输入下面两行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-comment"># user_name填入GitHub用户名</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;user_email&quot;</span> <span class="hljs-comment"># user_email填入GitHub注册的邮箱</span><br></code></pre></td></tr></table></figure></li></ol><blockquote><p>查看或者检验Git用户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.name<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config user.email<br></code></pre></td></tr></table></figure></blockquote><h2 id="Git-与GitHub建立ssh连接"><a href="#Git-与GitHub建立ssh连接" class="headerlink" title="Git 与GitHub建立ssh连接"></a>Git 与GitHub建立ssh连接</h2><ol><li><p>在blog文件夹内打开<code>Git Bash here</code>命令窗口，输入命令后，按三次回车，默认不设置密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;user.email&quot;</span> <span class="hljs-comment"># user.email 为GitHub 上注册的邮箱</span><br></code></pre></td></tr></table></figure></li><li><p>打开电脑文件夹<code>C:\Users\username\.ssh</code>,username是你的电脑账号名称。如果没有<code>.ssh</code>文件夹请点击<code>查看-显示-隐藏的项目</code>。</p></li><li><p>找到<code>id_rsa.pub</code>,用记事本打开，全选复制。</p><p>Ps：<code>id_rsa</code> 是私钥不能泄露，<code>id_rsa.pub</code> 是公钥可以放心告诉他人。</p></li><li><p>打开<a href="https://github.com/settings/ssh/new">Add new SSH key (github.com)</a>页面，新建一个SSH Keys</p><p>Title随便写，Key粘贴刚刚复制的内容。</p><p><img src="http://gcore.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172518.png"></p></li><li><p>使用下面命令验证是否连接成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>连接成功会提示<code>”Hi username...“</code></p><p><img src="https://gcore.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172942.png"></p></li></ol><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><h3 id="什么是hexo"><a href="#什么是hexo" class="headerlink" title="什么是hexo"></a>什么是hexo</h3><p><code>Hexo</code> 是一个简单、快速、强大的基于 <code>Github Pages</code> 的博客框架，支持 <code>Markdown</code> 格式，有众多优秀插件和主题。</p><h3 id="Hexo原理"><a href="#Hexo原理" class="headerlink" title="Hexo原理"></a>Hexo原理</h3><p>由于 <code>Github Pages</code> 存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以 <code>Hexo</code> 所做的就是将这些 <code>md</code> 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到<code>github</code></p><h3 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h3><ol><li><p>在blog文件夹内打开<code>Git Bash here</code>命令窗口，输入命令安装<code>hexo</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p>安装完成后，输入命令进行初始化设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016174011.png"></p></li></ol><h3 id="本地渲染与预览"><a href="#本地渲染与预览" class="headerlink" title="本地渲染与预览"></a>本地渲染与预览</h3><ol><li><p>输入命令，生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure></li><li><p>执行下面命令，开启本地预览。在浏览器中打开<code>http://localhost:4000/</code>，即可以看到初始化完成后的博客。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>如果本地预览出问题了，请按顺序输入命令<code>hexo g</code>,<code>hexo clean</code>,<code>hexo s</code></p></blockquote><h2 id="推送前准备"><a href="#推送前准备" class="headerlink" title="推送前准备"></a>推送前准备</h2><h3 id="配置站点文件"><a href="#配置站点文件" class="headerlink" title="配置站点文件"></a>配置站点文件</h3><p><code>hexo</code> 有 2 种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 <code>theme</code> 下的 <code>_config.yml</code>。将前者称为<strong>站点</strong>配置文件， 后者称为<strong>主题</strong>配置文件。</p><p>打开blog目录下站点配置文件 <code>_config.yml</code>，配置有关 <code>deploy</code> 的部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>打开仓库点击Code-SHH复制**<code>repo</code>**</p><p><code>branch</code>一般是main ，可以在仓库里面看</p><h3 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h3><p>在<code>Git Bash here</code>输入安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save <span class="hljs-comment"># 安装部署插件</span><br></code></pre></td></tr></table></figure><p>如果没有安装部署插件，<code>hexo d</code>会报错</p><p>到这里，如果不用fluid主题的话，可以直接推送到GitHub，<a href="#%E6%8E%A8%E9%80%81%E5%88%B0Github">点我跳转推送标题</a></p><h2 id="配置-fluid-主题"><a href="#配置-fluid-主题" class="headerlink" title="配置 fluid 主题"></a>配置 fluid 主题</h2><h3 id="安装Fluid主题"><a href="#安装Fluid主题" class="headerlink" title="安装Fluid主题"></a>安装Fluid主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在blog目录下创建 <code>_config.fluid.yml</code>，将<code>_config.yml</code>内容复制过去。</p><h3 id="应用fluid主题"><a href="#应用fluid主题" class="headerlink" title="应用fluid主题"></a>应用fluid主题</h3><p>修改blog目录下<code>_config.yml</code>的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p>最好连<code>_config.fluid.yml</code>的也改了</p><h3 id="创建关于页"><a href="#创建关于页" class="headerlink" title="创建关于页"></a>创建关于页</h3><p>使用命令<code>hexo new page about</code></p><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><blockquote><p><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p></blockquote><h2 id="推送到Github"><a href="#推送到Github" class="headerlink" title="推送到Github"></a>推送到Github</h2><p>在安装部署插件之后，如果发生修改了，需要重新渲染主题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p>推送到GitHub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>新建文章执行命令：<code>hexo new &quot;name&quot;</code></p><p>新建文章：打开<code>blog\source\_posts</code>目录，新建一个<strong>md</strong>类型的文件，文件名就是文章标题。</p><p>删除文章：打开<code>blog\source\_posts</code>目录，选择你要删除的文章，删除。然后重新渲染预览就删除了。</p><p>文章头部文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">关于初期建博的一些说明</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2024-01-12 09:04:49</span><br><span class="hljs-attr">tags:</span> <span class="hljs-string">博客</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">博客</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">https://gcore.jsdelivr.net/gh/wechatid/image/blog/202401120852183.jpg</span><br><span class="hljs-attr">banner_img:</span> <span class="hljs-string">https://gcore.jsdelivr.net/gh/wechatid/image/blog/202401120852183.jpg</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="right">键</th><th align="left">值</th></tr></thead><tbody><tr><td align="right">title</td><td align="left">文章名称</td></tr><tr><td align="right">date</td><td align="left">文章发布时间</td></tr><tr><td align="right">tags</td><td align="left">标签</td></tr><tr><td align="right">categories</td><td align="left">分类</td></tr><tr><td align="right">index_img</td><td align="left">封面图</td></tr><tr><td align="right">banner_img</td><td align="left">顶部图</td></tr></tbody></table><blockquote><p>其中<code>tags</code>标签,<code>categories</code>分类都可以定义多个，如<code>[博客,学习,代码]</code></p></blockquote><blockquote><p>英文冒号后面留一个<strong>空格</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
